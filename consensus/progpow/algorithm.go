// Copyright 2017 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package progpow

import (
	"encoding/binary"
	"hash"
	"math/big"
	"reflect"
	"runtime"
	"runtime/debug"
	"sync"
	"sync/atomic"
	"time"
	"unsafe"

	"golang.org/x/crypto/sha3"

	"github.com/dominant-strategies/go-quai/common"
	"github.com/dominant-strategies/go-quai/common/bitutil"
	"github.com/dominant-strategies/go-quai/crypto"
	"github.com/dominant-strategies/go-quai/log"
)

const (
	datasetInitBytes   = 1 << 32 // Bytes in dataset at genesis
	datasetGrowthBytes = 1 << 26 // Dataset growth per epoch
	cacheInitBytes     = 1 << 24 // Bytes in cache at genesis
	cacheGrowthBytes   = 1 << 21 // Cache growth per epoch
	mixBytes           = 128     // Width of mix
	hashBytes          = 64      // Hash length in bytes
	hashWords          = 16      // Number of 32 bit ints in a hash
	datasetParents     = 512     // Number of parents of each dataset element
	cacheRounds        = 3       // Number of rounds in cache production
	loopAccesses       = 64      // Number of accesses in hashimoto loop
)

var (
	C_epochLength uint64 = 388800
)

// cacheSize returns the size of the ethash verification cache that belongs to a certain
// block number.
func cacheSize(block uint64) uint64 {
	epoch := int(block / C_epochLength)
	return calcCacheSize(epoch)
}

// calcCacheSize calculates the cache size for epoch. The cache size grows linearly,
// however, we always take the highest prime below the linearly growing threshold in order
// to reduce the risk of accidental regularities leading to cyclic behavior.
func calcCacheSize(epoch int) uint64 {
	size := cacheInitBytes + cacheGrowthBytes*uint64(epoch) - hashBytes
	for !new(big.Int).SetUint64(size / hashBytes).ProbablyPrime(1) { // Always accurate for n < 2^64
		size -= 2 * hashBytes
	}
	return size
}

// datasetSize returns the size of the ethash mining dataset that belongs to a certain
// block number.
func datasetSize(block uint64) uint64 {
	epoch := int(block / C_epochLength)
	return calcDatasetSize(epoch)
}

// calcDatasetSize calculates the dataset size for epoch. The dataset size grows linearly,
// however, we always take the highest prime below the linearly growing threshold in order
// to reduce the risk of accidental regularities leading to cyclic behavior.
func calcDatasetSize(epoch int) uint64 {
	size := datasetInitBytes + datasetGrowthBytes*uint64(epoch) - mixBytes
	for !new(big.Int).SetUint64(size / mixBytes).ProbablyPrime(1) { // Always accurate for n < 2^64
		size -= 2 * mixBytes
	}
	return size
}

// hasher is a repetitive hasher allowing the same hash data structures to be
// reused between hash runs instead of requiring new ones to be created.
type hasher func(dest []byte, data []byte)

// makeHasher creates a repetitive hasher, allowing the same hash data structures to
// be reused between hash runs instead of requiring new ones to be created. The returned
// function is not thread safe!
func makeHasher(h hash.Hash) hasher {
	// sha3.state supports Read to get the sum, use it to avoid the overhead of Sum.
	// Read alters the state but we reset the hash before every operation.
	type readerHash interface {
		hash.Hash
		Read([]byte) (int, error)
	}
	rh, ok := h.(readerHash)
	if !ok {
		panic("can't find Read method on hash")
	}
	outputLen := rh.Size()
	return func(dest []byte, data []byte) {
		rh.Reset()
		rh.Write(data)
		rh.Read(dest[:outputLen])
	}
}

// seedHash is the seed to use for generating a verification cache and the mining
// dataset.
func seedHash(block uint64) []byte {
	seed := make([]byte, 32)
	if block < C_epochLength {
		return seed
	}
	keccak256 := makeHasher(sha3.NewLegacyKeccak256())
	for i := 0; i < int(block/C_epochLength); i++ {
		keccak256(seed, seed)
	}
	return seed
}

// SeedHash is the seed to use for generating a verification cache and the mining
// dataset.
func SeedHash(block uint64) []byte {
	return seedHash(block)
}

// generateCache creates a verification cache of a given size for an input seed.
// The cache production process involves first sequentially filling up 32 MB of
// memory, then performing two passes of Sergio Demian Lerner's RandMemoHash
// algorithm from Strict Memory Hard Hashing Functions (2014). The output is a
// set of 524288 64-byte values.
// This method places the result into dest in machine byte order.
func generateCache(dest []uint32, epoch uint64, seed []byte, logger *log.Logger) {
	// Print some debug logs to allow analysis on low end devices

	start := time.Now()
	defer func() {
		elapsed := time.Since(start)

		logEntry := logger.WithFields(log.Fields{
			"elapsed": common.PrettyDuration(elapsed),
		})

		if elapsed > 3*time.Second {
			logEntry.Info("Generating ethash verification cache")
		} else {
			logEntry.Debug("Generating ethash verification cache")
		}
	}()
	// Convert our destination slice to a byte buffer
	header := *(*reflect.SliceHeader)(unsafe.Pointer(&dest))
	header.Len *= 4
	header.Cap *= 4
	cache := *(*[]byte)(unsafe.Pointer(&header))

	// Calculate the number of theoretical rows (we'll store in one buffer nonetheless)
	size := uint64(len(cache))
	rows := int(size) / hashBytes

	// Start a monitoring goroutine to report progress on low end devices
	var progress uint32

	done := make(chan struct{})
	defer close(done)

	go func() {
		defer func() {
			if r := recover(); r != nil {
				logger.WithFields(log.Fields{
					"error":      r,
					"stacktrace": string(debug.Stack()),
				}).Error("Go-Quai Panicked")
			}
		}()
		for {
			select {
			case <-done:
				return
			case <-time.After(3 * time.Second):
				logger.WithFields(log.Fields{
					"percentage": uint64(atomic.LoadUint32(&progress) * 100 / uint32(rows) / 4),
					"elapsed":    common.PrettyDuration(time.Since(start)),
				}).Info("Generating ethash verification cache")
			}
		}
	}()
	// Create a hasher to reuse between invocations
	keccak512 := makeHasher(sha3.NewLegacyKeccak512())

	// Sequentially produce the initial dataset
	keccak512(cache, seed)
	for offset := uint64(hashBytes); offset < size; offset += hashBytes {
		keccak512(cache[offset:], cache[offset-hashBytes:offset])
		atomic.AddUint32(&progress, 1)
	}
	// Use a low-round version of randmemohash
	temp := make([]byte, hashBytes)

	for i := 0; i < cacheRounds; i++ {
		for j := 0; j < rows; j++ {
			var (
				srcOff = ((j - 1 + rows) % rows) * hashBytes
				dstOff = j * hashBytes
				xorOff = (binary.LittleEndian.Uint32(cache[dstOff:]) % uint32(rows)) * hashBytes
			)
			bitutil.XORBytes(temp, cache[srcOff:srcOff+hashBytes], cache[xorOff:xorOff+hashBytes])
			keccak512(cache[dstOff:], temp)

			atomic.AddUint32(&progress, 1)
		}
	}
	// Swap the byte order on big endian systems and return
	if !isLittleEndian() {
		swap(cache)
	}
}

// generateCDag generates the cDag used for progpow. If the 'cDag' is nil, this method is a no-op. Otherwise
// it expects the cDag to be of size progpowCacheWords
func generateCDag(cDag, cache []uint32, epoch uint64, logger *log.Logger) {
	if cDag == nil {
		return
	}
	start := time.Now()
	keccak512 := makeHasher(sha3.NewLegacyKeccak512())

	for i := uint32(0); i < progpowCacheWords/16; i++ {
		rawData := generateDatasetItem(cache, i, keccak512)
		// 64 bytes in rawData -> 16 uint32
		for j := uint32(0); j < 16; j++ {
			cDag[i*16+j] = binary.LittleEndian.Uint32(rawData[4*j:])
		}
	}

	elapsed := time.Since(start)
	logger.WithFields(log.Fields{
		"elapsed": common.PrettyDuration(elapsed),
		"epoch":   epoch,
	}).Debug("Generated progpow cDag")
}

// swap changes the byte order of the buffer assuming a uint32 representation.
func swap(buffer []byte) {
	for i := 0; i < len(buffer); i += 4 {
		binary.BigEndian.PutUint32(buffer[i:], binary.LittleEndian.Uint32(buffer[i:]))
	}
}

// fnv is an algorithm inspired by the FNV hash, which in some cases is used as
// a non-associative substitute for XOR. Note that we multiply the prime with
// the full 32-bit input, in contrast with the FNV-1 spec which multiplies the
// prime with one byte (octet) in turn.
func fnv(a, b uint32) uint32 {
	return a*0x01000193 ^ b
}

// fnvHash mixes in data into mix using the ethash fnv method.
func fnvHash(mix []uint32, data []uint32) {
	for i := 0; i < len(mix); i++ {
		mix[i] = mix[i]*0x01000193 ^ data[i]
	}
}

// generateDatasetItem combines data from 256 pseudorandomly selected cache nodes,
// and hashes that to compute a single dataset node.
func generateDatasetItem(cache []uint32, index uint32, keccak512 hasher) []byte {
	// Calculate the number of theoretical rows (we use one buffer nonetheless)
	rows := uint32(len(cache) / hashWords)

	// Initialize the mix
	mix := make([]byte, hashBytes)

	binary.LittleEndian.PutUint32(mix, cache[(index%rows)*hashWords]^index)
	for i := 1; i < hashWords; i++ {
		binary.LittleEndian.PutUint32(mix[i*4:], cache[(index%rows)*hashWords+uint32(i)])
	}
	keccak512(mix, mix)

	// Convert the mix to uint32s to avoid constant bit shifting
	intMix := make([]uint32, hashWords)
	for i := 0; i < len(intMix); i++ {
		intMix[i] = binary.LittleEndian.Uint32(mix[i*4:])
	}
	// fnv it with a lot of random cache nodes based on index
	for i := uint32(0); i < datasetParents; i++ {
		parent := fnv(index^i, intMix[i%16]) % rows
		fnvHash(intMix, cache[parent*hashWords:])
	}
	// Flatten the uint32 mix into a binary one and return
	for i, val := range intMix {
		binary.LittleEndian.PutUint32(mix[i*4:], val)
	}
	keccak512(mix, mix)
	return mix
}

// generateDataset generates the entire ethash dataset for mining.
// This method places the result into dest in machine byte order.
func generateDataset(dest []uint32, epoch uint64, cache []uint32, logger *log.Logger) {
	start := time.Now()
	defer func() {
		elapsed := time.Since(start)

		logEntry := log.Global.WithFields(log.Fields{
			"elapsed": common.PrettyDuration(elapsed),
		})

		if elapsed > 3*time.Second {
			logEntry.Info("Generating ethash  verification cache")
		} else {
			logEntry.Debug("Generating ethash  verification cache")
		}
	}()

	// Figure out whether the bytes need to be swapped for the machine
	swapped := !isLittleEndian()

	// Convert our destination slice to a byte buffer
	header := *(*reflect.SliceHeader)(unsafe.Pointer(&dest))
	header.Len *= 4
	header.Cap *= 4
	dataset := *(*[]byte)(unsafe.Pointer(&header))

	// Generate the dataset on many goroutines since it takes a while
	threads := runtime.NumCPU()
	size := uint64(len(dataset))

	var pend sync.WaitGroup
	pend.Add(threads)

	var progress uint32
	for i := 0; i < threads; i++ {
		go func(id int) {
			defer func() {
				if r := recover(); r != nil {
					logger.WithFields(log.Fields{
						"error":      r,
						"stacktrace": string(debug.Stack()),
					}).Error("Go-Quai Panicked")
				}
			}()
			defer pend.Done()

			// Create a hasher to reuse between invocations
			keccak512 := makeHasher(sha3.NewLegacyKeccak512())

			// Calculate the data segment this thread should generate
			batch := uint32((size + hashBytes*uint64(threads) - 1) / (hashBytes * uint64(threads)))
			first := uint32(id) * batch
			limit := first + batch
			if limit > uint32(size/hashBytes) {
				limit = uint32(size / hashBytes)
			}
			// Calculate the dataset segment
			percent := uint32(size / hashBytes / 100)
			for index := first; index < limit; index++ {
				item := generateDatasetItem(cache, index, keccak512)
				if swapped {
					swap(item)
				}
				copy(dataset[index*hashBytes:], item)

				if status := atomic.AddUint32(&progress, 1); status%percent == 0 {
					logger.WithFields(log.Fields{
						"percentage": uint64(status * 100 / uint32(size/hashBytes)),
						"elapsed":    common.PrettyDuration(time.Since(start)),
					}).Info("Generating DAG in progress")
				}
			}
		}(i)
	}
	// Wait for all the generators to finish and return
	pend.Wait()
}

// hashimoto aggregates data from the full dataset in order to produce our final
// value for a particular header hash and nonce.
func hashimoto(hash []byte, nonce uint64, size uint64, lookup func(index uint32) []uint32) ([]byte, []byte) {
	// Calculate the number of theoretical rows (we use one buffer nonetheless)
	rows := uint32(size / mixBytes)

	// Combine header+nonce into a 64 byte seed
	seed := make([]byte, 40)
	copy(seed, hash)
	binary.LittleEndian.PutUint64(seed[32:], nonce)

	seed = crypto.Keccak512(seed)
	seedHead := binary.LittleEndian.Uint32(seed)

	// Start the mix with replicated seed
	mix := make([]uint32, mixBytes/4)
	for i := 0; i < len(mix); i++ {
		mix[i] = binary.LittleEndian.Uint32(seed[i%16*4:])
	}
	// Mix in random dataset nodes
	temp := make([]uint32, len(mix))

	for i := 0; i < loopAccesses; i++ {
		parent := fnv(uint32(i)^seedHead, mix[i%len(mix)]) % rows
		for j := uint32(0); j < mixBytes/hashBytes; j++ {
			copy(temp[j*hashWords:], lookup(2*parent+j))
		}
		fnvHash(mix, temp)
	}
	// Compress mix
	for i := 0; i < len(mix); i += 4 {
		mix[i/4] = fnv(fnv(fnv(mix[i], mix[i+1]), mix[i+2]), mix[i+3])
	}
	mix = mix[:len(mix)/4]

	digest := make([]byte, common.HashLength)
	for i, val := range mix {
		binary.LittleEndian.PutUint32(digest[i*4:], val)
	}
	return digest, crypto.Keccak256(append(seed, digest...))
}

// hashimotoLight aggregates data from the full dataset (using only a small
// in-memory cache) in order to produce our final value for a particular header
// hash and nonce.
func hashimotoLight(size uint64, cache []uint32, hash []byte, nonce uint64) ([]byte, []byte) {
	keccak512 := makeHasher(sha3.NewLegacyKeccak512())

	lookup := func(index uint32) []uint32 {
		rawData := generateDatasetItem(cache, index, keccak512)

		data := make([]uint32, len(rawData)/4)
		for i := 0; i < len(data); i++ {
			data[i] = binary.LittleEndian.Uint32(rawData[i*4:])
		}
		return data
	}
	return hashimoto(hash, nonce, size, lookup)
}

// hashimotoFull aggregates data from the full dataset (using the full in-memory
// dataset) in order to produce our final value for a particular header hash and
// nonce.
func hashimotoFull(dataset []uint32, hash []byte, nonce uint64) ([]byte, []byte) {
	lookup := func(index uint32) []uint32 {
		offset := index * hashWords
		return dataset[offset : offset+hashWords]
	}
	return hashimoto(hash, nonce, uint64(len(dataset))*4, lookup)
}

const maxCachedEpoch = 1024

// datasetSizes is a lookup table for the ethash dataset size for the
// first maxCachedEpoch epochs
var datasetSizes = [maxCachedEpoch]uint64{
	4294962304, 4362073472, 4429182848, 4496289664,
	4563402112, 4630511488, 4697620352, 4764727936,
	4831835776, 4898946944, 4966054784, 5033164672,
	5100273536, 5167382144, 5234490496, 5301598592,
	5368706944, 5435816576, 5502925952, 5570032768,
	5637143936, 5704251008, 5771358592, 5838468992,
	5905576832, 5972688256, 6039796096, 6106906496,
	6174009728, 6241124224, 6308232064, 6375337856,
	6442444672, 6509555072, 6576662912, 6643777408,
	6710882176, 6777993856, 6845101696, 6912212864,
	6979317376, 7046427776, 7113536896, 7180648064,
	7247755904, 7314864512, 7381973888, 7449080192,
	7516192384, 7583300992, 7650410368, 7717519232,
	7784626816, 7851732352, 7918844288, 7985953408,
	8053062272, 8120171392, 8187280768, 8254389376,
	8321497984, 8388606592, 8455715456, 8522823808,
	8589933952, 8657040256, 8724151424, 8791260032,
	8858366336, 8925478784, 8992584064, 9059694208,
	9126803584, 9193910144, 9261021824, 9328131968,
	9395239808, 9462346624, 9529456256, 9596567168,
	9663675776, 9730772608, 9797892992, 9865000576,
	9932108672, 9999219584, 10066329472, 10133437312,
	10200545408, 10267656064, 10334763392, 10401867136,
	10468982144, 10536091264, 10603200128, 10670307968,
	10737414784, 10804525184, 10871631488, 10938742912,
	11005851776, 11072960896, 11140065152, 11207179136,
	11274285952, 11341395584, 11408504192, 11475611776,
	11542724224, 11609830016, 11676940928, 11744050048,
	11811157888, 11878268032, 11945375872, 12012486272,
	12079594624, 12146703232, 12213811328, 12280920448,
	12348029312, 12415138432, 12482245504, 12549354368,
	12616463488, 12683574656, 12750680192, 12817789312,
	12884901248, 12952009856, 13019115392, 13086227072,
	13153329536, 13220445824, 13287553408, 13354663808,
	13421771392, 13488875648, 13555989376, 13623097472,
	13690207616, 13757316224, 13824425344, 13891533184,
	13958643584, 14025752192, 14092852352, 14159968384,
	14227067264, 14294187904, 14361296512, 14428402304,
	14495511424, 14562618496, 14629724288, 14696835968,
	14763947648, 14831056256, 14898165376, 14965276544,
	15032385152, 15099493504, 15166602368, 15233708416,
	15300819584, 15367929728, 15435037568, 15502146944,
	15569254528, 15636364928, 15703474048, 15770582656,
	15837691264, 15904799104, 15971907968, 16039012736,
	16106125184, 16173236096, 16240344704, 16307449216,
	16374561664, 16441668224, 16508779648, 16575888512,
	16642996096, 16710095488, 16777214336, 16844323712,
	16911431296, 16978540928, 17045649536, 17112759424,
	17179864192, 17246976896, 17314085504, 17381190016,
	17448303232, 17515409024, 17582519168, 17649630848,
	17716739968, 17783848832, 17850955648, 17918058112,
	17985175424, 18052283264, 18119388544, 18186498944,
	18253610624, 18320717696, 18387828352, 18454937216,
	18522045056, 18589154432, 18656262784, 18723370112,
	18790481536, 18857585792, 18924697216, 18991807616,
	19058916992, 19126026112, 19193133952, 19260243584,
	19327352192, 19394460544, 19461568384, 19528678784,
	19595787136, 19662895744, 19730003584, 19797113216,
	19864222592, 19931329408, 19998441088, 20065547648,
	20132657024, 20199764096, 20266874752, 20333985664,
	20401083776, 20468202112, 20535312256, 20602420864,
	20669528192, 20736635776, 20803746944, 20870854016,
	20937962624, 21005074304, 21072181888, 21139292032,
	21206397568, 21273509248, 21340616576, 21407727232,
	21474829696, 21541944448, 21609052288, 21676160384,
	21743271808, 21810378112, 21877489024, 21944597632,
	22011704192, 22078815872, 22145924224, 22213031552,
	22280142208, 22347250048, 22414359424, 22481468288,
	22548574592, 22615686272, 22682793856, 22749904768,
	22817013376, 22884118144, 22951228288, 23018338688,
	23085448832, 23152557184, 23219662208, 23286773632,
	23353881472, 23420992384, 23488101248, 23555207296,
	23622319744, 23689422464, 23756533376, 23823644288,
	23890754176, 23957861504, 24024969856, 24092081792,
	24159190912, 24226299008, 24293406848, 24360517504,
	24427624576, 24494734976, 24561839488, 24628951936,
	24696055424, 24763170688, 24830273408, 24897387904,
	24964496512, 25031604608, 25098714752, 25165822592,
	25232930176, 25300034944, 25367149952, 25434259072,
	25501365632, 25568472448, 25635585152, 25702692992,
	25769799296, 25836910976, 25904019584, 25971129728,
	26038237312, 26105347456, 26172456064, 26239565696,
	26306672768, 26373782912, 26440892288, 26508000128,
	26575107968, 26642217344, 26709327488, 26776432768,
	26843545472, 26910651776, 26977761152, 27044871296,
	27111978368, 27179086976, 27246196864, 27313307264,
	27380416384, 27447524224, 27514628224, 27581742976,
	27648844672, 27715959424, 27783069568, 27850178432,
	27917286272, 27984394624, 28051501696, 28118612864,
	28185721216, 28252831616, 28319938432, 28387044736,
	28454155904, 28521263744, 28588364416, 28655484544,
	28722592384, 28789702016, 28856811136, 28923916928,
	28991026304, 29058137728, 29125245824, 29192350592,
	29259463808, 29326573184, 29393681024, 29460790144,
	29527897216, 29595008896, 29662116992, 29729222272,
	29796335488, 29863443328, 29930551936, 29997660544,
	30064769408, 30131879552, 30198986624, 30266096768,
	30333205888, 30400314496, 30467419264, 30534532736,
	30601641856, 30668749952, 30735859328, 30802963328,
	30870077312, 30937184896, 31004294528, 31071400576,
	31138512256, 31205620352, 31272727936, 31339838848,
	31406947456, 31474050688, 31541163392, 31608274304,
	31675383424, 31742490496, 31809600896, 31876701056,
	31943818624, 32010927232, 32078036608, 32145145216,
	32212253056, 32279362432, 32346472064, 32413577344,
	32480690048, 32547798656, 32614906496, 32682015616,
	32749121408, 32816233088, 32883336064, 32950451584,
	33017560448, 33084669824, 33151776128, 33218886784,
	33285996416, 33353105024, 33420212864, 33487316608,
	33554429056, 33621538432, 33688648064, 33755758208,
	33822866816, 33889965952, 33957081472, 34024191616,
	34091302016, 34158403712, 34225510784, 34292624512,
	34359731072, 34426845568, 34493953664, 34561063808,
	34628170112, 34695281024, 34762385792, 34829497984,
	34896609152, 34963716992, 35030824832, 35097934208,
	35165043328, 35232151424, 35299259264, 35366362496,
	35433476224, 35500588672, 35567694464, 35634802048,
	35701915264, 35769023872, 35836133248, 35903239552,
	35970337664, 36037457536, 36104567936, 36171675776,
	36238786432, 36305893504, 36373003904, 36440110976,
	36507220352, 36574328704, 36641437568, 36708546944,
	36775654016, 36842763904, 36909872768, 36976980608,
	37044089728, 37111198336, 37178308736, 37245418624,
	37312528256, 37379634304, 37446745472, 37513849216,
	37580961664, 37648066432, 37715179648, 37782290048,
	37849391488, 37916499584, 37983614848, 38050725248,
	38117829248, 38184938368, 38252051072, 38319160448,
	38386269056, 38453378176, 38520486272, 38587596416,
	38654704768, 38721804416, 38788922752, 38856032128,
	38923139456, 38990248832, 39057356672, 39124465024,
	39191576192, 39258680704, 39325791104, 39392900224,
	39460010368, 39527118976, 39594226816, 39661337984,
	39728447104, 39795553664, 39862663552, 39929770624,
	39996882304, 40063990144, 40131098752, 40198200704,
	40265318272, 40332427136, 40399531904, 40466644864,
	40533753472, 40600860544, 40667970944, 40735078016,
	40802187904, 40869298048, 40936403072, 41003513984,
	41070624128, 41137733248, 41204839552, 41271948416,
	41339059072, 41406168704, 41473277056, 41540384384,
	41607495296, 41674596736, 41741711744, 41808819328,
	41875928704, 41943039616, 42010145152, 42077257088,
	42144364928, 42211472768, 42278582656, 42345691264,
	42412798592, 42479910272, 42547019392, 42614125952,
	42681235328, 42748343936, 42815453312, 42882561664,
	42949670528, 43016779648, 43083889792, 43150999168,
	43218104192, 43285216384, 43352319104, 43419432064,
	43486542976, 43553651584, 43620757888, 43687869824,
	43754978944, 43822086272, 43889196928, 43956301952,
	44023414144, 44090521472, 44157630848, 44224736384,
	44291848576, 44358956672, 44426062976, 44493176704,
	44560285568, 44627394176, 44694499712, 44761611392,
	44828716672, 44895829376, 44962936192, 45030045056,
	45097155968, 45164265088, 45231371392, 45298481024,
	45365588864, 45432697984, 45499806848, 45566916224,
	45634024064, 45701132416, 45768244352, 45835352704,
	45902461312, 45969571712, 46036679552, 46103788672,
	46170897536, 46238006912, 46305108352, 46372221824,
	46439333504, 46506439808, 46573549952, 46640653952,
	46707769216, 46774877056, 46841985664, 46909090432,
	46976204672, 47043312256, 47110420096, 47177529472,
	47244634496, 47311748992, 47378856832, 47445964928,
	47513073536, 47580182912, 47647291264, 47714394752,
	47781510272, 47848614784, 47915727232, 47982836864,
	48049942912, 48117053056, 48184161152, 48251269504,
	48318379904, 48385488512, 48452599168, 48519704704,
	48586815616, 48653924992, 48721035136, 48788142976,
	48855252608, 48922361216, 48989470592, 49056577664,
	49123687552, 49190797184, 49257905792, 49325014912,
	49392118912, 49459232128, 49526340224, 49593450112,
	49660555904, 49727666816, 49794775424, 49861885312,
	49928994176, 49996103552, 50063211136, 50130318976,
	50197430144, 50264538496, 50331646592, 50398754176,
	50465864576, 50532972928, 50600083328, 50667191936,
	50734297984, 50801402752, 50868515968, 50935627648,
	51002733952, 51069844096, 51136951168, 51204061312,
	51271171712, 51338273408, 51405388928, 51472498048,
	51539605888, 51606713728, 51673819264, 51740931712,
	51808041856, 51875149952, 51942255488, 52009367936,
	52076477312, 52143584384, 52210696064, 52277800576,
	52344912512, 52412019584, 52479129728, 52546239104,
	52613346176, 52680451456, 52747566464, 52814675072,
	52881784192, 52948885888, 53015996288, 53083104128,
	53150218624, 53217329024, 53284436096, 53351545472,
	53418651008, 53485759616, 53552872064, 53619979136,
	53687089024, 53754199936, 53821308544, 53888417152,
	53955526528, 54022632064, 54089739136, 54156850816,
	54223958144, 54291068288, 54358178944, 54425288576,
	54492395648, 54559505536, 54626604416, 54693716864,
	54760832128, 54827938432, 54895050368, 54962156416,
	55029263488, 55096376704, 55163483264, 55230594688,
	55297701248, 55364811904, 55431918208, 55499028352,
	55566139264, 55633247104, 55700355712, 55767463552,
	55834574464, 55901679488, 55968788608, 56035897472,
	56103009152, 56170118272, 56237224832, 56304336512,
	56371441792, 56438552704, 56505659776, 56572769152,
	56639877248, 56706988928, 56774090624, 56841204608,
	56908314752, 56975423872, 57042534272, 57109642624,
	57176751488, 57243860864, 57310969472, 57378077824,
	57445186432, 57512295296, 57579401344, 57646511744,
	57713620352, 57780730496, 57847840384, 57914948992,
	57982057856, 58049166976, 58116274816, 58183384192,
	58250493824, 58317598336, 58384710016, 58451819648,
	58518928768, 58586035328, 58653145984, 58720254848,
	58787362432, 58854466432, 58921581184, 58988689024,
	59055799168, 59122908032, 59190017408, 59257126784,
	59324233856, 59391344512, 59458452608, 59525561728,
	59592671104, 59659777664, 59726888576, 59793996928,
	59861106304, 59928214912, 59995324288, 60062432384,
	60129541504, 60196641152, 60263758976, 60330868352,
	60397975168, 60465084032, 60532189568, 60599302528,
	60666411392, 60733519744, 60800630144, 60867736192,
	60934846592, 61001954432, 61069066112, 61136171648,
	61203282304, 61270392448, 61337497472, 61404609152,
	61471717504, 61538827648, 61605932672, 61673045888,
	61740154496, 61807259264, 61874371712, 61941479296,
	62008590208, 62075695232, 62142805376, 62209907072,
	62277024896, 62344134016, 62411239808, 62478350464,
	62545456768, 62612569216, 62679676288, 62746786688,
	62813896576, 62881005184, 62948114048, 63015219328,
	63082327936, 63149439616, 63216547712, 63283651712,
	63350765696, 63417871744, 63484983424, 63552090752,
	63619202176, 63686307968, 63753417856, 63820528768,
	63887636864, 63954747008, 64021855616, 64088964736,
	64156069504, 64223181184, 64290291584, 64357400192,
	64424508032, 64491614848, 64558724224, 64625835392,
	64692942976, 64760052608, 64827160448, 64894269824,
	64961372032, 65028487808, 65095597184, 65162701696,
	65229812864, 65296924544, 65364032128, 65431139968,
	65498248832, 65565354368, 65632468864, 65699576192,
	65766685312, 65833794688, 65900899712, 65968011136,
	66035120512, 66102226304, 66169338496, 66236448128,
	66303554432, 66370666112, 66437774464, 66504875648,
	66571989376, 66639100288, 66706207616, 66773319296,
	66840427904, 66907534976, 66974645632, 67041747328,
	67108863616, 67175972224, 67243080832, 67310188672,
	67377282176, 67444405376, 67511516032, 67578622336,
	67645729664, 67712835712, 67779948416, 67847059328,
	67914168704, 67981278592, 68048381312, 68115496576,
	68182603904, 68249714048, 68316821632, 68383927424,
	68451036032, 68518150016, 68585253248, 68652365696,
	68719476352, 68786585216, 68853688448, 68920801408,
	68987909504, 69055019648, 69122129792, 69189236608,
	69256345472, 69323453824, 69390564736, 69457665664,
	69524781184, 69591891328, 69658999936, 69726109568,
	69793215104, 69860323712, 69927435904, 69994544512,
	70061653888, 70128762752, 70195870336, 70262979968,
	70330086784, 70397197952, 70464305536, 70531414144,
	70598524544, 70665633152, 70732741504, 70799847296,
	70866957184, 70934067328, 71001177472, 71068286336,
	71135395712, 71202501248, 71269612928, 71336719232,
	71403826304, 71470937984, 71538047872, 71605155968,
	71672262784, 71739374464, 71806476416, 71873592704,
	71940696704, 72007810432, 72074919296, 72142027136,
	72209133952, 72276244864, 72343355008, 72410463872,
	72477570688, 72544678784, 72611790208, 72678899584,
	72746008448, 72813112192, 72880224128, 72947333248,
}

// cacheSizes is a lookup table for the ethash verification cache size for the
// first maxCachedEpoch epochs
var cacheSizes = [maxCachedEpoch]uint64{
	16776896, 18874304, 20971072, 23068096,
	25165376, 27262528, 29359808, 31456192,
	33554368, 35650624, 37747904, 39844928,
	41942848, 44039104, 46136768, 48234176,
	50331584, 52427968, 54525248, 56621888,
	58720192, 60817216, 62910784, 65009216,
	67108672, 69205568, 71303104, 73400128,
	75497024, 77593664, 79690816, 81786304,
	83886016, 85982656, 88079168, 90177088,
	92273344, 94371776, 96468544, 98565568,
	100662592, 102760384, 104854592, 106954304,
	109049792, 111148864, 113244224, 115343296,
	117440192, 119537344, 121634752, 123731264,
	125829056, 127925696, 130023104, 132120256,
	134217152, 136313792, 138411584, 140508352,
	142606144, 144701888, 146800448, 148897088,
	150993088, 153091648, 155188928, 157284416,
	159381568, 161480512, 163577408, 165674944,
	167771584, 169866304, 171966272, 174063424,
	176159936, 178257472, 180354752, 182451904,
	184548928, 186645952, 188743616, 190840768,
	192937792, 195035072, 197130688, 199228352,
	201326144, 203423296, 205517632, 207616832,
	209715136, 211812032, 213909184, 216005312,
	218102848, 220200128, 222297536, 224394944,
	226491712, 228588736, 230684864, 232782272,
	234880832, 236976448, 239075008, 241171904,
	243268672, 245365312, 247463872, 249560512,
	251657792, 253754432, 255851072, 257949632,
	260045888, 262143424, 264241088, 266337728,
	268435264, 270531904, 272629568, 274726208,
	276822976, 278921152, 281018176, 283115072,
	285211712, 287308352, 289406528, 291504064,
	293600192, 295698112, 297794624, 299891776,
	301989056, 304086976, 306182848, 308280512,
	310377664, 312475456, 314570944, 316669376,
	318766528, 320862656, 322960576, 325058368,
	327154624, 329252416, 331349696, 333446336,
	335544128, 337640896, 339736256, 341835328,
	343931584, 346030016, 348126656, 350223296,
	352321472, 354418496, 356514112, 358610624,
	360708928, 362805056, 364904128, 366998848,
	369096256, 371195584, 373291456, 375389888,
	377485376, 379581632, 381681472, 383778496,
	385875136, 387971392, 390067648, 392166976,
	394264384, 396360512, 398458688, 400555328,
	402652736, 404750272, 406846912, 408943936,
	411041216, 413136832, 415233472, 417333184,
	419428928, 421526848, 423623104, 425718848,
	427818176, 429915712, 432012992, 434110016,
	436207424, 438304576, 440401216, 442497344,
	444596032, 446693056, 448789568, 450887104,
	452984512, 455081408, 457178944, 459275584,
	461372864, 463470272, 465567296, 467663296,
	469760576, 471856192, 473955008, 476053184,
	478150336, 480247616, 482344768, 484440896,
	486537664, 488635712, 490733504, 492830656,
	494926912, 497024576, 499122112, 501217088,
	503315264, 505412032, 507509312, 509606848,
	511705024, 513801664, 515897024, 517996096,
	520092992, 522190016, 524287424, 526384832,
	528481984, 530579008, 532676416, 534772928,
	536869952, 538960064, 541065152, 543161792,
	545257408, 547356352, 549453376, 551548736,
	553646528, 555745088, 557842112, 559939136,
	562035008, 564132928, 566230976, 568326848,
	570424768, 572522432, 574616384, 576715712,
	578813888, 580910912, 583006912, 585102656,
	587202368, 589298368, 591393472, 593492672,
	595590208, 597687232, 599784256, 601881536,
	603979456, 606076096, 608172608, 610270016,
	612366016, 614464832, 616562368, 618659264,
	620756672, 622853824, 624951232, 627046592,
	629145152, 631241536, 633336896, 635436352,
	637533632, 639630272, 641726656, 643824704,
	645922496, 648019648, 650117056, 652212928,
	654309952, 656407616, 658505024, 660602816,
	662698688, 664795328, 666893888, 668990272,
	671088064, 673185728, 675280832, 677379904,
	679477184, 681573952, 683669696, 685768256,
	687865792, 689962304, 692059072, 694156352,
	696253504, 698350784, 700448704, 702544576,
	704642368, 706740032, 708836672, 710934208,
	713031232, 715127872, 717225536, 719322944,
	721419584, 723517376, 725614528, 727708736,
	729807808, 731905472, 734003008, 736099648,
	738197056, 740294336, 742391488, 744488768,
	746585792, 748682944, 750779584, 752877248,
	754974016, 757070528, 759168832, 761265088,
	763363264, 765459776, 767557312, 769652672,
	771751744, 773848384, 775946048, 778041536,
	780139328, 782237504, 784334528, 786431936,
	788528192, 790626112, 792723136, 794820032,
	796915648, 799014592, 801109696, 803207872,
	805305152, 807401792, 809500096, 811597376,
	813693376, 815791168, 817886912, 819983552,
	822082112, 824179648, 826277824, 828372928,
	830471744, 832568512, 834666304, 836763328,
	838860608, 840956608, 843054656, 845150528,
	847248832, 849346496, 851443136, 853540544,
	855637312, 857734336, 859830592, 861929408,
	864023872, 866122304, 868217408, 870318016,
	872414528, 874512064, 876609472, 878706112,
	880803136, 882899648, 884997952, 887094976,
	889191232, 891289024, 893386432, 895483712,
	897578944, 899677888, 901775296, 903872192,
	905968832, 908065856, 910163776, 912260672,
	914355776, 916454464, 918551488, 920648896,
	922744384, 924842816, 926939968, 929038016,
	931134656, 933232448, 935328448, 937425472,
	939524032, 941619904, 943715776, 945815488,
	947912512, 950009792, 952106048, 954203456,
	956300608, 958395584, 960494272, 962591296,
	964689728, 966786752, 968882752, 970978496,
	973078336, 975175232, 977271616, 979369408,
	981466048, 983564096, 985660864, 987758528,
	989853632, 991950016, 994046528, 996147136,
	998243776, 1000340032, 1002437312, 1004534848,
	1006631104, 1008730048, 1010826944, 1012923712,
	1015019968, 1017116992, 1019215424, 1021312832,
	1023409984, 1025507008, 1027604288, 1029700928,
	1031798336, 1033894976, 1035990976, 1038089152,
	1040186816, 1042282816, 1044381376, 1046477888,
	1048574528, 1050672704, 1052769856, 1054865984,
	1056964288, 1059061568, 1061157568, 1063254208,
	1065350336, 1067449664, 1069546304, 1071644608,
	1073741632, 1075838656, 1077936064, 1080032192,
	1082128832, 1084227392, 1086321088, 1088418368,
	1090517696, 1092615872, 1094713024, 1096810432,
	1098907456, 1101000256, 1103101504, 1105197248,
	1107293632, 1109390272, 1111489856, 1113587648,
	1115683904, 1117781696, 1119879104, 1121976256,
	1124072512, 1126170176, 1128263872, 1130364608,
	1132461376, 1134558272, 1136656064, 1138753472,
	1140850624, 1142947136, 1145043136, 1147141312,
	1149238336, 1151336128, 1153433536, 1155530176,
	1157625536, 1159724096, 1161819584, 1163916736,
	1166016064, 1168113472, 1170210112, 1172307776,
	1174404032, 1176501952, 1178598208, 1180695104,
	1182790208, 1184890688, 1186983488, 1189084352,
	1191181504, 1193279168, 1195374272, 1197473344,
	1199569984, 1201666112, 1203765184, 1205859136,
	1207959488, 1210056256, 1212153664, 1214250304,
	1216347712, 1218444736, 1220542144, 1222637632,
	1224736192, 1226833472, 1228930624, 1231027904,
	1233123904, 1235221952, 1237318592, 1239416768,
	1241513408, 1243610432, 1245707072, 1247805376,
	1249901888, 1251998912, 1254095936, 1256193856,
	1258291136, 1260387904, 1262485184, 1264582208,
	1266679616, 1268776384, 1270871744, 1272970304,
	1275067072, 1277165504, 1279262528, 1281358912,
	1283456704, 1285553344, 1287650752, 1289748032,
	1291843264, 1293941696, 1296036928, 1298137024,
	1300233664, 1302330944, 1304428096, 1306524224,
	1308620224, 1310719936, 1312815808, 1314913984,
	1317011008, 1319107648, 1321203776, 1323301696,
	1325398208, 1327494976, 1329594176, 1331688256,
	1333787456, 1335885248, 1337982656, 1340080064,
	1342176448, 1344273472, 1346369344, 1348466624,
	1350565312, 1352662336, 1354759232, 1356855488,
	1358953664, 1361050304, 1363146688, 1365245632,
	1367342528, 1369440064, 1371536576, 1373633984,
	1375731008, 1377827392, 1379925824, 1382022848,
	1384116416, 1386217024, 1388312768, 1390411712,
	1392508864, 1394605504, 1396700992, 1398800192,
	1400897216, 1402993472, 1405091008, 1407187136,
	1409285824, 1411381696, 1413479744, 1415577536,
	1417674688, 1419768512, 1421867072, 1423965632,
	1426060736, 1428160192, 1430257216, 1432353344,
	1434450496, 1436549056, 1438643392, 1440742976,
	1442838464, 1444937152, 1447034816, 1449131968,
	1451225792, 1453326272, 1455421504, 1457519552,
	1459617344, 1461712832, 1463811392, 1465907648,
	1468005824, 1470102464, 1472200384, 1474293952,
	1476394688, 1478492096, 1480588864, 1482684352,
	1484782784, 1486879936, 1488975808, 1491074752,
	1493169472, 1495269184, 1497365696, 1499463488,
	1501560128, 1503657664, 1505754176, 1507852096,
	1509947968, 1512044992, 1514143552, 1516240448,
	1518337984, 1520434624, 1522531904, 1524628288,
	1526726464, 1528822336, 1530918848, 1533016768,
	1535114176, 1537211968, 1539307712, 1541406656,
	1543501888, 1545600064, 1547697472, 1549794368,
	1551891136, 1553988544, 1556086592, 1558182848,
	1560281024, 1562377664, 1564472384, 1566570688,
	1568669632, 1570766656, 1572862528, 1574959808,
	1577054656, 1579153216, 1581252544, 1583347648,
	1585446592, 1587543872, 1589640128, 1591735232,
	1593834688, 1595931328, 1598028352, 1600126784,
	1602222784, 1604320064, 1606418368, 1608515264,
	1610612032, 1612709312, 1614806464, 1616903872,
	1619001152, 1621098176, 1623195584, 1625291456,
	1627389248, 1629486784, 1631582912, 1633681216,
	1635778112, 1637875136, 1639972288, 1642069696,
	1644166208, 1646264128, 1648359616, 1650457408,
	1652555456, 1654652096, 1656750016, 1658846912,
	1660943552, 1663041472, 1665136576, 1667235008,
	1669329472, 1671429184, 1673526592, 1675623616,
	1677720256, 1679817536, 1681913536, 1684011584,
	1686110144, 1688204864, 1690304192, 1692400448,
	1694498752, 1696594112, 1698692288, 1700787008,
	1702887104, 1704984256, 1707081536, 1709178176,
	1711275968, 1713372736, 1715468992, 1717566784,
	1719664192, 1721761472, 1723857088, 1725954112,
	1728052288, 1730149952, 1732246976, 1734344384,
	1736441792, 1738535488, 1740634432, 1742732864,
	1744827584, 1746927296, 1749024448, 1751121728,
	1753217216, 1755315776, 1757413184, 1759510208,
	1761606976, 1763704256, 1765801792, 1767894592,
	1769993536, 1772092864, 1774190144, 1776286784,
	1778381632, 1780481344, 1782578624, 1784676032,
	1786772672, 1788870592, 1790967232, 1793064512,
	1795162048, 1797258304, 1799356352, 1801453504,
	1803549376, 1805646016, 1807744192, 1809841984,
	1811938624, 1814036416, 1816132928, 1818229312,
	1820323264, 1822424512, 1824521792, 1826618944,
	1828715072, 1830813632, 1832910784, 1835007296,
	1837103936, 1839201856, 1841298752, 1843395776,
	1845492416, 1847590592, 1849683904, 1851784768,
	1853882176, 1855978688, 1858076224, 1860170944,
	1862270528, 1864366528, 1866462784, 1868560832,
	1870659008, 1872755648, 1874853184, 1876950848,
	1879045568, 1881144896, 1883240768, 1885338304,
	1887436352, 1889533504, 1891630016, 1893727936,
	1895825216, 1897918912, 1900018112, 1902113216,
	1904213824, 1906309952, 1908407744, 1910502208,
	1912602304, 1914698944, 1916796352, 1918891328,
	1920990784, 1923088064, 1925185216, 1927279168,
	1929377984, 1931476928, 1933573952, 1935671104,
	1937768128, 1939865024, 1941960256, 1944059456,
	1946156864, 1948253248, 1950351296, 1952445632,
	1954543936, 1956639424, 1958739392, 1960836928,
	1962934208, 1965027776, 1967128256, 1969224896,
	1971322688, 1973418176, 1975516096, 1977612352,
	1979711168, 1981807936, 1983904576, 1986001088,
	1988100032, 1990196288, 1992294208, 1994391104,
	1996487488, 1998585536, 2000681792, 2002780096,
	2004875584, 2006971712, 2009070656, 2011166656,
	2013265216, 2015361472, 2017455808, 2019556544,
	2021654464, 2023750208, 2025847744, 2027945792,
	2030042176, 2032140224, 2034236224, 2036334016,
	2038431424, 2040527296, 2042624704, 2044722112,
	2046820288, 2048917184, 2051014208, 2053110848,
	2055206848, 2057305792, 2059402816, 2061500096,
	2063597248, 2065693888, 2067791552, 2069888192,
	2071985984, 2074083136, 2076180416, 2078276672,
	2080373056, 2082471616, 2084567872, 2086664768,
	2088762944, 2090858944, 2092956352, 2095052992,
	2097151808, 2099247424, 2101345984, 2103443392,
	2105538368, 2107636288, 2109731776, 2111830976,
	2113927744, 2116025792, 2118123328, 2120219072,
	2122316864, 2124414784, 2126511424, 2128609088,
	2130706112, 2132801728, 2134899904, 2136996416,
	2139092416, 2141191232, 2143289024, 2145385408,
	2147481152, 2149579072, 2151674816, 2153774528,
	2155871552, 2157968704, 2160065216, 2162161472,
}
