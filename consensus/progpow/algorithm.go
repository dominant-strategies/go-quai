// Copyright 2017 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package progpow

import (
	"encoding/binary"
	"hash"
	"math/big"
	"reflect"
	"runtime"
	"runtime/debug"
	"sync"
	"sync/atomic"
	"time"
	"unsafe"

	"golang.org/x/crypto/sha3"

	"github.com/dominant-strategies/go-quai/common"
	"github.com/dominant-strategies/go-quai/common/bitutil"
	"github.com/dominant-strategies/go-quai/crypto"
	"github.com/dominant-strategies/go-quai/log"
)

const (
	datasetInitBytes   = 1 << 32 // Bytes in dataset at genesis
	datasetGrowthBytes = 1 << 25 // Dataset growth per epoch
	cacheInitBytes     = 1 << 24 // Bytes in cache at genesis
	cacheGrowthBytes   = 1 << 20 // Cache growth per epoch
	mixBytes           = 128     // Width of mix
	hashBytes          = 64      // Hash length in bytes
	hashWords          = 16      // Number of 32 bit ints in a hash
	datasetParents     = 512     // Number of parents of each dataset element
	cacheRounds        = 3       // Number of rounds in cache production
	loopAccesses       = 64      // Number of accesses in hashimoto loop
)

var (
	C_epochLength = uint64(3)
)

// cacheSize returns the size of the ethash verification cache that belongs to a certain
// block number.
func cacheSize(block uint64) uint64 {
	epoch := int(block / C_epochLength)
	if epoch < maxEpoch {
		return cacheSizes[epoch]
	}
	return calcCacheSize(epoch)
}

// calcCacheSize calculates the cache size for epoch. The cache size grows linearly,
// however, we always take the highest prime below the linearly growing threshold in order
// to reduce the risk of accidental regularities leading to cyclic behavior.
func calcCacheSize(epoch int) uint64 {
	size := cacheInitBytes + cacheGrowthBytes*uint64(epoch) - hashBytes
	for !new(big.Int).SetUint64(size / hashBytes).ProbablyPrime(1) { // Always accurate for n < 2^64
		size -= 2 * hashBytes
	}
	return size
}

// datasetSize returns the size of the ethash mining dataset that belongs to a certain
// block number.
func datasetSize(block uint64) uint64 {
	epoch := int(block / C_epochLength)
	if epoch < maxEpoch {
		return datasetSizes[epoch]
	}
	return calcDatasetSize(epoch)
}

// calcDatasetSize calculates the dataset size for epoch. The dataset size grows linearly,
// however, we always take the highest prime below the linearly growing threshold in order
// to reduce the risk of accidental regularities leading to cyclic behavior.
func calcDatasetSize(epoch int) uint64 {
	size := datasetInitBytes + datasetGrowthBytes*uint64(epoch) - mixBytes
	for !new(big.Int).SetUint64(size / mixBytes).ProbablyPrime(1) { // Always accurate for n < 2^64
		size -= 2 * mixBytes
	}
	return size
}

// hasher is a repetitive hasher allowing the same hash data structures to be
// reused between hash runs instead of requiring new ones to be created.
type hasher func(dest []byte, data []byte)

// makeHasher creates a repetitive hasher, allowing the same hash data structures to
// be reused between hash runs instead of requiring new ones to be created. The returned
// function is not thread safe!
func makeHasher(h hash.Hash) hasher {
	// sha3.state supports Read to get the sum, use it to avoid the overhead of Sum.
	// Read alters the state but we reset the hash before every operation.
	type readerHash interface {
		hash.Hash
		Read([]byte) (int, error)
	}
	rh, ok := h.(readerHash)
	if !ok {
		panic("can't find Read method on hash")
	}
	outputLen := rh.Size()
	return func(dest []byte, data []byte) {
		rh.Reset()
		rh.Write(data)
		rh.Read(dest[:outputLen])
	}
}

// seedHash is the seed to use for generating a verification cache and the mining
// dataset.
func seedHash(block uint64) []byte {
	seed := make([]byte, 32)
	if block < C_epochLength {
		return seed
	}
	keccak256 := makeHasher(sha3.NewLegacyKeccak256())
	for i := 0; i < int(block/C_epochLength); i++ {
		keccak256(seed, seed)
	}
	return seed
}

// SeedHash is the seed to use for generating a verification cache and the mining
// dataset.
func SeedHash(block uint64) []byte {
	return seedHash(block)
}

// generateCache creates a verification cache of a given size for an input seed.
// The cache production process involves first sequentially filling up 32 MB of
// memory, then performing two passes of Sergio Demian Lerner's RandMemoHash
// algorithm from Strict Memory Hard Hashing Functions (2014). The output is a
// set of 524288 64-byte values.
// This method places the result into dest in machine byte order.
func generateCache(dest []uint32, epoch uint64, seed []byte, logger *log.Logger) {
	// Print some debug logs to allow analysis on low end devices

	start := time.Now()
	defer func() {
		elapsed := time.Since(start)

		logEntry := logger.WithFields(log.Fields{
			"elapsed": common.PrettyDuration(elapsed),
		})

		if elapsed > 3*time.Second {
			logEntry.Info("Generating ethash verification cache")
		} else {
			logEntry.Debug("Generating ethash verification cache")
		}
	}()
	// Convert our destination slice to a byte buffer
	header := *(*reflect.SliceHeader)(unsafe.Pointer(&dest))
	header.Len *= 4
	header.Cap *= 4
	cache := *(*[]byte)(unsafe.Pointer(&header))

	// Calculate the number of theoretical rows (we'll store in one buffer nonetheless)
	size := uint64(len(cache))
	rows := int(size) / hashBytes

	// Start a monitoring goroutine to report progress on low end devices
	var progress uint32

	done := make(chan struct{})
	defer close(done)

	go func() {
		defer func() {
			if r := recover(); r != nil {
				logger.WithFields(log.Fields{
					"error":      r,
					"stacktrace": string(debug.Stack()),
				}).Error("Go-Quai Panicked")
			}
		}()
		for {
			select {
			case <-done:
				return
			case <-time.After(3 * time.Second):
				logger.WithFields(log.Fields{
					"percentage": uint64(atomic.LoadUint32(&progress) * 100 / uint32(rows) / 4),
					"elapsed":    common.PrettyDuration(time.Since(start)),
				}).Info("Generating ethash verification cache")
			}
		}
	}()
	// Create a hasher to reuse between invocations
	keccak512 := makeHasher(sha3.NewLegacyKeccak512())

	// Sequentially produce the initial dataset
	keccak512(cache, seed)
	for offset := uint64(hashBytes); offset < size; offset += hashBytes {
		keccak512(cache[offset:], cache[offset-hashBytes:offset])
		atomic.AddUint32(&progress, 1)
	}
	// Use a low-round version of randmemohash
	temp := make([]byte, hashBytes)

	for i := 0; i < cacheRounds; i++ {
		for j := 0; j < rows; j++ {
			var (
				srcOff = ((j - 1 + rows) % rows) * hashBytes
				dstOff = j * hashBytes
				xorOff = (binary.LittleEndian.Uint32(cache[dstOff:]) % uint32(rows)) * hashBytes
			)
			bitutil.XORBytes(temp, cache[srcOff:srcOff+hashBytes], cache[xorOff:xorOff+hashBytes])
			keccak512(cache[dstOff:], temp)

			atomic.AddUint32(&progress, 1)
		}
	}
	// Swap the byte order on big endian systems and return
	if !isLittleEndian() {
		swap(cache)
	}
}

// generateCDag generates the cDag used for progpow. If the 'cDag' is nil, this method is a no-op. Otherwise
// it expects the cDag to be of size progpowCacheWords
func generateCDag(cDag, cache []uint32, epoch uint64, logger *log.Logger) {
	if cDag == nil {
		return
	}
	start := time.Now()
	keccak512 := makeHasher(sha3.NewLegacyKeccak512())

	for i := uint32(0); i < progpowCacheWords/16; i++ {
		rawData := generateDatasetItem(cache, i, keccak512)
		// 64 bytes in rawData -> 16 uint32
		for j := uint32(0); j < 16; j++ {
			cDag[i*16+j] = binary.LittleEndian.Uint32(rawData[4*j:])
		}
	}

	elapsed := time.Since(start)
	logger.WithFields(log.Fields{
		"elapsed": common.PrettyDuration(elapsed),
		"epoch":   epoch,
	}).Debug("Generated progpow cDag")
}

// swap changes the byte order of the buffer assuming a uint32 representation.
func swap(buffer []byte) {
	for i := 0; i < len(buffer); i += 4 {
		binary.BigEndian.PutUint32(buffer[i:], binary.LittleEndian.Uint32(buffer[i:]))
	}
}

// fnv is an algorithm inspired by the FNV hash, which in some cases is used as
// a non-associative substitute for XOR. Note that we multiply the prime with
// the full 32-bit input, in contrast with the FNV-1 spec which multiplies the
// prime with one byte (octet) in turn.
func fnv(a, b uint32) uint32 {
	return a*0x01000193 ^ b
}

// fnvHash mixes in data into mix using the ethash fnv method.
func fnvHash(mix []uint32, data []uint32) {
	for i := 0; i < len(mix); i++ {
		mix[i] = mix[i]*0x01000193 ^ data[i]
	}
}

// generateDatasetItem combines data from 256 pseudorandomly selected cache nodes,
// and hashes that to compute a single dataset node.
func generateDatasetItem(cache []uint32, index uint32, keccak512 hasher) []byte {
	// Calculate the number of theoretical rows (we use one buffer nonetheless)
	rows := uint32(len(cache) / hashWords)

	// Initialize the mix
	mix := make([]byte, hashBytes)

	binary.LittleEndian.PutUint32(mix, cache[(index%rows)*hashWords]^index)
	for i := 1; i < hashWords; i++ {
		binary.LittleEndian.PutUint32(mix[i*4:], cache[(index%rows)*hashWords+uint32(i)])
	}
	keccak512(mix, mix)

	// Convert the mix to uint32s to avoid constant bit shifting
	intMix := make([]uint32, hashWords)
	for i := 0; i < len(intMix); i++ {
		intMix[i] = binary.LittleEndian.Uint32(mix[i*4:])
	}
	// fnv it with a lot of random cache nodes based on index
	for i := uint32(0); i < datasetParents; i++ {
		parent := fnv(index^i, intMix[i%16]) % rows
		fnvHash(intMix, cache[parent*hashWords:])
	}
	// Flatten the uint32 mix into a binary one and return
	for i, val := range intMix {
		binary.LittleEndian.PutUint32(mix[i*4:], val)
	}
	keccak512(mix, mix)
	return mix
}

// generateDataset generates the entire ethash dataset for mining.
// This method places the result into dest in machine byte order.
func generateDataset(dest []uint32, epoch uint64, cache []uint32, logger *log.Logger) {
	start := time.Now()
	defer func() {
		elapsed := time.Since(start)

		logEntry := log.Global.WithFields(log.Fields{
			"elapsed": common.PrettyDuration(elapsed),
		})

		if elapsed > 3*time.Second {
			logEntry.Info("Generating ethash  verification cache")
		} else {
			logEntry.Debug("Generating ethash  verification cache")
		}
	}()

	// Figure out whether the bytes need to be swapped for the machine
	swapped := !isLittleEndian()

	// Convert our destination slice to a byte buffer
	header := *(*reflect.SliceHeader)(unsafe.Pointer(&dest))
	header.Len *= 4
	header.Cap *= 4
	dataset := *(*[]byte)(unsafe.Pointer(&header))

	// Generate the dataset on many goroutines since it takes a while
	threads := runtime.NumCPU()
	size := uint64(len(dataset))

	var pend sync.WaitGroup
	pend.Add(threads)

	var progress uint32
	for i := 0; i < threads; i++ {
		go func(id int) {
			defer func() {
				if r := recover(); r != nil {
					logger.WithFields(log.Fields{
						"error":      r,
						"stacktrace": string(debug.Stack()),
					}).Error("Go-Quai Panicked")
				}
			}()
			defer pend.Done()

			// Create a hasher to reuse between invocations
			keccak512 := makeHasher(sha3.NewLegacyKeccak512())

			// Calculate the data segment this thread should generate
			batch := uint32((size + hashBytes*uint64(threads) - 1) / (hashBytes * uint64(threads)))
			first := uint32(id) * batch
			limit := first + batch
			if limit > uint32(size/hashBytes) {
				limit = uint32(size / hashBytes)
			}
			// Calculate the dataset segment
			percent := uint32(size / hashBytes / 100)
			for index := first; index < limit; index++ {
				item := generateDatasetItem(cache, index, keccak512)
				if swapped {
					swap(item)
				}
				copy(dataset[index*hashBytes:], item)

				if status := atomic.AddUint32(&progress, 1); status%percent == 0 {
					logger.WithFields(log.Fields{
						"percentage": uint64(status * 100 / uint32(size/hashBytes)),
						"elapsed":    common.PrettyDuration(time.Since(start)),
					}).Info("Generating DAG in progress")
				}
			}
		}(i)
	}
	// Wait for all the generators to finish and return
	pend.Wait()
}

// hashimoto aggregates data from the full dataset in order to produce our final
// value for a particular header hash and nonce.
func hashimoto(hash []byte, nonce uint64, size uint64, lookup func(index uint32) []uint32) ([]byte, []byte) {
	// Calculate the number of theoretical rows (we use one buffer nonetheless)
	rows := uint32(size / mixBytes)

	// Combine header+nonce into a 64 byte seed
	seed := make([]byte, 40)
	copy(seed, hash)
	binary.LittleEndian.PutUint64(seed[32:], nonce)

	seed = crypto.Keccak512(seed)
	seedHead := binary.LittleEndian.Uint32(seed)

	// Start the mix with replicated seed
	mix := make([]uint32, mixBytes/4)
	for i := 0; i < len(mix); i++ {
		mix[i] = binary.LittleEndian.Uint32(seed[i%16*4:])
	}
	// Mix in random dataset nodes
	temp := make([]uint32, len(mix))

	for i := 0; i < loopAccesses; i++ {
		parent := fnv(uint32(i)^seedHead, mix[i%len(mix)]) % rows
		for j := uint32(0); j < mixBytes/hashBytes; j++ {
			copy(temp[j*hashWords:], lookup(2*parent+j))
		}
		fnvHash(mix, temp)
	}
	// Compress mix
	for i := 0; i < len(mix); i += 4 {
		mix[i/4] = fnv(fnv(fnv(mix[i], mix[i+1]), mix[i+2]), mix[i+3])
	}
	mix = mix[:len(mix)/4]

	digest := make([]byte, common.HashLength)
	for i, val := range mix {
		binary.LittleEndian.PutUint32(digest[i*4:], val)
	}
	return digest, crypto.Keccak256(append(seed, digest...))
}

// hashimotoLight aggregates data from the full dataset (using only a small
// in-memory cache) in order to produce our final value for a particular header
// hash and nonce.
func hashimotoLight(size uint64, cache []uint32, hash []byte, nonce uint64) ([]byte, []byte) {
	keccak512 := makeHasher(sha3.NewLegacyKeccak512())

	lookup := func(index uint32) []uint32 {
		rawData := generateDatasetItem(cache, index, keccak512)

		data := make([]uint32, len(rawData)/4)
		for i := 0; i < len(data); i++ {
			data[i] = binary.LittleEndian.Uint32(rawData[i*4:])
		}
		return data
	}
	return hashimoto(hash, nonce, size, lookup)
}

// hashimotoFull aggregates data from the full dataset (using the full in-memory
// dataset) in order to produce our final value for a particular header hash and
// nonce.
func hashimotoFull(dataset []uint32, hash []byte, nonce uint64) ([]byte, []byte) {
	lookup := func(index uint32) []uint32 {
		offset := index * hashWords
		return dataset[offset : offset+hashWords]
	}
	return hashimoto(hash, nonce, uint64(len(dataset))*4, lookup)
}

const maxEpoch = 1024

// datasetSizes is a lookup table for the ethash dataset size for the first 2048
// epochs (i.e. 61440000 blocks).
var datasetSizes = [maxEpoch]uint64{
	4294962304, 4328521088, 4362073472, 4395630208, 4429182848, 4462738048, 4496289664,
	4529846144, 4563402112, 4596957056, 4630511488, 4664065664, 4697620352, 4731173248,
	4764727936, 4798283648, 4831835776, 4865391488, 4898946944, 4932499328, 4966054784,
	4999607168, 5033164672, 5066717056, 5100273536, 5133827456, 5167382144, 5200936064,
	5234490496, 5268040832, 5301598592, 5335151488, 5368706944, 5402263424, 5435816576,
	5469367936, 5502925952, 5536481152, 5570032768, 5603585408, 5637143936, 5670694784,
	5704251008, 5737806208, 5771358592, 5804911232, 5838468992, 5872024448, 5905576832,
	5939132288, 5972688256, 6006241408, 6039796096, 6073351808, 6106906496, 6140459648,
	6174009728, 6207569792, 6241124224, 6274676864, 6308232064, 6341784704, 6375337856,
	6408895616, 6442444672, 6476004224, 6509555072, 6543112832, 6576662912, 6610219648,
	6643777408, 6677330048, 6710882176, 6744437632, 6777993856, 6811549312, 6845101696,
	6878655104, 6912212864, 6945764992, 6979317376, 7012875392, 7046427776, 7079980928,
	7113536896, 7147092352, 7180648064, 7214196608, 7247755904, 7281308032, 7314864512,
	7348419712, 7381973888, 7415528576, 7449080192, 7482635648, 7516192384, 7549745792,
	7583300992, 7616854912, 7650410368, 7683961984, 7717519232, 7751069056, 7784626816,
	7818179968, 7851732352, 7885287808, 7918844288, 7952400256, 7985953408, 8019508096,
	8053062272, 8086616704, 8120171392, 8153726848, 8187280768, 8220834176, 8254389376,
	8287944064, 8321497984, 8355052928, 8388606592, 8422161536, 8455715456, 8489270656,
	8522823808, 8556378752, 8589933952, 8623487872, 8657040256, 8690592128, 8724151424,
	8757704576, 8791260032, 8824812928, 8858366336, 8891923328, 8925478784, 8959032704,
	8992584064, 9026141312, 9059694208, 9093250688, 9126803584, 9160356224, 9193910144,
	9227465344, 9261021824, 9294574208, 9328131968, 9361685888, 9395239808, 9428795008,
	9462346624, 9495903616, 9529456256, 9563011456, 9596567168, 9630121856, 9663675776,
	9697230464, 9730772608, 9764338816, 9797892992, 9831439232, 9865000576, 9898556288,
	9932108672, 9965666176, 9999219584, 10032774016, 10066329472, 10099878784, 10133437312,
	10166991232, 10200545408, 10234099328, 10267656064, 10301209472, 10334763392, 10368318592,
	10401867136, 10435425664, 10468982144, 10502533504, 10536091264, 10569642368, 10603200128,
	10636754048, 10670307968, 10703863168, 10737414784, 10770971264, 10804525184, 10838078336,
	10871631488, 10905188992, 10938742912, 10972298368, 11005851776, 11039403904, 11072960896,
	11106514816, 11140065152, 11173624192, 11207179136, 11240734592, 11274285952, 11307842432,
	11341395584, 11374950016, 11408504192, 11442061184, 11475611776, 11509169024, 11542724224,
	11576277376, 11609830016, 11643387776, 11676940928, 11710496128, 11744050048, 11777604736,
	11811157888, 11844713344, 11878268032, 11911822976, 11945375872, 11978928512, 12012486272,
	12046039168, 12079594624, 12113147264, 12146703232, 12180255872, 12213811328, 12247365248,
	12280920448, 12314475392, 12348029312, 12381580928, 12415138432, 12448692352, 12482245504,
	12515801728, 12549354368, 12582911872, 12616463488, 12650019968, 12683574656, 12717128576,
	12750680192, 12784236928, 12817789312, 12851345792, 12884901248, 12918455168, 12952009856,
	12985563776, 13019115392, 13052673152, 13086227072, 13119782528, 13153329536, 13186884736,
	13220445824, 13254000512, 13287553408, 13321108096, 13354663808, 13388210816, 13421771392,
	13455326848, 13488875648, 13522435712, 13555989376, 13589544832, 13623097472, 13656652928,
	13690207616, 13723762048, 13757316224, 13790869376, 13824425344, 13857978752, 13891533184,
	13925085056, 13958643584, 13992197504, 14025752192, 14059301504, 14092852352, 14126407552,
	14159968384, 14193521024, 14227067264, 14260630144, 14294187904, 14327738752, 14361296512,
	14394848128, 14428402304, 14461959808, 14495511424, 14529064832, 14562618496, 14596172672,
	14629724288, 14663284864, 14696835968, 14730392192, 14763947648, 14797499776, 14831056256,
	14864612992, 14898165376, 14931721856, 14965276544, 14998830976, 15032385152, 15065939072,
	15099493504, 15133042304, 15166602368, 15200154496, 15233708416, 15267265408, 15300819584,
	15334374784, 15367929728, 15401481856, 15435037568, 15468589184, 15502146944, 15535699072,
	15569254528, 15602809472, 15636364928, 15669918848, 15703474048, 15737027456, 15770582656,
	15804132224, 15837691264, 15871244672, 15904799104, 15938354816, 15971907968, 16005460864,
	16039012736, 16072571264, 16106125184, 16139678848, 16173236096, 16206790528, 16240344704,
	16273898624, 16307449216, 16341006464, 16374561664, 16408116352, 16441668224, 16475224448,
	16508779648, 16542330752, 16575888512, 16609442944, 16642996096, 16676552576, 16710095488,
	16743661184, 16777214336, 16810768768, 16844323712, 16877876864, 16911431296, 16944987776,
	16978540928, 17012096896, 17045649536, 17079205504, 17112759424, 17146314368, 17179864192,
	17213423488, 17246976896, 17280530048, 17314085504, 17347640192, 17381190016, 17414748544,
	17448303232, 17481857408, 17515409024, 17548966016, 17582519168, 17616076672, 17649630848,
	17683178368, 17716739968, 17750293888, 17783848832, 17817402752, 17850955648, 17884511872,
	17918058112, 17951609216, 17985175424, 18018728576, 18052283264, 18085837184, 18119388544,
	18152947328, 18186498944, 18220048768, 18253610624, 18287163008, 18320717696, 18354269056,
	18387828352, 18421379456, 18454937216, 18488488576, 18522045056, 18555600512, 18589154432,
	18622708352, 18656262784, 18689814656, 18723370112, 18756927104, 18790481536, 18824034688,
	18857585792, 18891145088, 18924697216, 18958250368, 18991807616, 19025360768, 19058916992,
	19092468608, 19126026112, 19159578752, 19193133952, 19226688896, 19260243584, 19293797504,
	19327352192, 19360906624, 19394460544, 19428008576, 19461568384, 19495124864, 19528678784,
	19562226304, 19595787136, 19629339776, 19662895744, 19696450688, 19730003584, 19763557504,
	19797113216, 19830666368, 19864222592, 19897776512, 19931329408, 19964885888, 19998441088,
	20031993472, 20065547648, 20099103872, 20132657024, 20166212992, 20199764096, 20233319552,
	20266874752, 20300427904, 20333985664, 20367539072, 20401083776, 20434646912, 20468202112,
	20501757824, 20535312256, 20568861056, 20602420864, 20635966592, 20669528192, 20703082112,
	20736635776, 20770191488, 20803746944, 20837301376, 20870854016, 20904409984, 20937962624,
	20971515776, 21005074304, 21038626688, 21072181888, 21105736832, 21139292032, 21172845952,
	21206397568, 21239954816, 21273509248, 21307063168, 21340616576, 21374169728, 21407727232,
	21441281152, 21474829696, 21508386176, 21541944448, 21575499392, 21609052288, 21642607744,
	21676160384, 21709716352, 21743271808, 21776820608, 21810378112, 21843922816, 21877489024,
	21911040128, 21944597632, 21978150016, 22011704192, 22045260928, 22078815872, 22112365952,
	22145924224, 22179476864, 22213031552, 22246584704, 22280142208, 22313696128, 22347250048,
	22380804736, 22414359424, 22447913344, 22481468288, 22515023744, 22548574592, 22582132096,
	22615686272, 22649236096, 22682793856, 22716350336, 22749904768, 22783457408, 22817013376,
	22850564992, 22884118144, 22917670016, 22951228288, 22984783232, 23018338688, 23051892608,
	23085448832, 23119002496, 23152557184, 23186110592, 23219662208, 23253220736, 23286773632,
	23320330112, 23353881472, 23387437952, 23420992384, 23454541696, 23488101248, 23521647488,
	23555207296, 23588763776, 23622319744, 23655873664, 23689422464, 23722981504, 23756533376,
	23790088064, 23823644288, 23857201024, 23890754176, 23924309888, 23957861504, 23991416704,
	24024969856, 24058526848, 24092081792, 24125635712, 24159190912, 24192745088, 24226299008,
	24259847296, 24293406848, 24326961536, 24360517504, 24394070912, 24427624576, 24461180288,
	24494734976, 24528288896, 24561839488, 24595396736, 24628951936, 24662507392, 24696055424,
	24729612928, 24763170688, 24796724608, 24830273408, 24863829632, 24897387904, 24930942592,
	24964496512, 24998048384, 25031604608, 25065159296, 25098714752, 25132264576, 25165822592,
	25199377792, 25232930176, 25266486656, 25300034944, 25333596032, 25367149952, 25400699264,
	25434259072, 25467813248, 25501365632, 25534914688, 25568472448, 25602030208, 25635585152,
	25669140352, 25702692992, 25736249216, 25769799296, 25803356032, 25836910976, 25870464128,
	25904019584, 25937575808, 25971129728, 26004684416, 26038237312, 26071793536, 26105347456,
	26138900864, 26172456064, 26206009472, 26239565696, 26273118848, 26306672768, 26340227456,
	26373782912, 26407336832, 26440892288, 26474442112, 26508000128, 26541552256, 26575107968,
	26608660096, 26642217344, 26675771776, 26709327488, 26742882176, 26776432768, 26809990016,
	26843545472, 26877099904, 26910651776, 26944207232, 26977761152, 27011317376, 27044871296,
	27078424448, 27111978368, 27145534336, 27179086976, 27212642176, 27246196864, 27279749248,
	27313307264, 27346859648, 27380416384, 27413969536, 27447524224, 27481077376, 27514628224,
	27548181376, 27581742976, 27615297152, 27648844672, 27682406272, 27715959424, 27749510528,
	27783069568, 27816622976, 27850178432, 27883729024, 27917286272, 27950837632, 27984394624,
	28017947264, 28051501696, 28085057408, 28118612864, 28152163712, 28185721216, 28219274624,
	28252831616, 28286385536, 28319938432, 28353494144, 28387044736, 28420601984, 28454155904,
	28487709568, 28521263744, 28554821248, 28588364416, 28621927808, 28655484544, 28689036416,
	28722592384, 28756143232, 28789702016, 28823255936, 28856811136, 28890365824, 28923916928,
	28957473152, 28991026304, 29024583296, 29058137728, 29091689344, 29125245824, 29158800256,
	29192350592, 29225903744, 29259463808, 29293014656, 29326573184, 29360124544, 29393681024,
	29427236224, 29460790144, 29494344832, 29527897216, 29561454464, 29595008896, 29628563072,
	29662116992, 29695672192, 29729222272, 29762780288, 29796335488, 29829887872, 29863443328,
	29896998016, 29930551936, 29964105088, 29997660544, 30031210624, 30064769408, 30098324864,
	30131879552, 30165433472, 30198986624, 30232542848, 30266096768, 30299650688, 30333205888,
	30366760064, 30400314496, 30433864064, 30467419264, 30500978048, 30534532736, 30568079744,
	30601641856, 30635195264, 30668749952, 30702303872, 30735859328, 30769412224, 30802963328,
	30836521088, 30870077312, 30903630976, 30937184896, 30970735232, 31004294528, 31037847424,
	31071400576, 31104958336, 31138512256, 31172061056, 31205620352, 31239174784, 31272727936,
	31306283648, 31339838848, 31373393024, 31406947456, 31440502144, 31474050688, 31507610752,
	31541163392, 31574720384, 31608274304, 31641828992, 31675383424, 31708934528, 31742490496,
	31776046208, 31809600896, 31843154048, 31876701056, 31910263936, 31943818624, 31977372032,
	32010927232, 32044481408, 32078036608, 32111591296, 32145145216, 32178698624, 32212253056,
	32245806464, 32279362432, 32312908928, 32346472064, 32380022912, 32413577344, 32447134336,
	32480690048, 32514238336, 32547798656, 32581353344, 32614906496, 32648458624, 32682015616,
	32715569792, 32749121408, 32782673024, 32816233088, 32849788544, 32883336064, 32916894592,
	32950451584, 32984005504, 33017560448, 33051114368, 33084669824, 33118216832, 33151776128,
	33185329792, 33218886784, 33252437888, 33285996416, 33319550848, 33353105024, 33386655616,
	33420212864, 33453768064, 33487316608, 33520875904, 33554429056, 33587982976, 33621538432,
	33655094912, 33688648064, 33722203264, 33755758208, 33789312896, 33822866816, 33856421504,
	33889965952, 33923523968, 33957081472, 33990633856, 34024191616, 34057746304, 34091302016,
	34124853376, 34158403712, 34191965824, 34225510784, 34259073664, 34292624512, 34326181504,
	34359731072, 34393291904, 34426845568, 34460395136, 34493953664, 34527508864, 34561063808,
	34594616192, 34628170112, 34661727616, 34695281024, 34728835712, 34762385792, 34795942528,
	34829497984, 34863053696, 34896609152, 34930163584, 34963716992, 34997272192, 35030824832,
	35064377984, 35097934208, 35131489408, 35165043328, 35198598784, 35232151424, 35265701248,
	35299259264, 35332813696, 35366362496, 35399925632, 35433476224, 35467032704, 35500588672,
	35534141312, 35567694464, 35601250688, 35634802048, 35668356736, 35701915264, 35735469184,
	35769023872, 35802577024, 35836133248, 35869681024, 35903239552, 35936796032, 35970337664,
	36003905408, 36037457536, 36071014016, 36104567936, 36138123136, 36171675776, 36205228672,
	36238786432, 36272340352, 36305893504, 36339448448, 36373003904, 36406558336, 36440110976,
	36473666176, 36507220352, 36540775552, 36574328704, 36607882112, 36641437568, 36674991488,
	36708546944, 36742102912, 36775654016, 36809209984, 36842763904, 36876320128, 36909872768,
	36943428992, 36976980608, 37010536064, 37044089728, 37077645952, 37111198336, 37144750208,
	37178308736, 37211857792, 37245418624, 37278972032, 37312528256, 37346080384, 37379634304,
	37413187712, 37446745472, 37480298368, 37513849216, 37547408512, 37580961664, 37614517888,
	37648066432, 37681626496, 37715179648, 37748735872, 37782290048, 37815843712, 37849391488,
	37882950016, 37916499584, 37950061696, 37983614848, 38017171072, 38050725248, 38084279936,
	38117829248, 38151387776, 38184938368, 38218497664, 38252051072, 38285604736, 38319160448,
	38352715136, 38386269056, 38419824512, 38453378176, 38486926208, 38520486272, 38554041728,
	38587596416, 38621146496,
}

// cacheSizes is a lookup table for the ethash verification cache size for the
// first 2048 epochs (i.e. 61440000 blocks).
var cacheSizes = [maxEpoch]uint64{
	16776896, 17824192, 18874304, 19922752, 20971072, 22019392, 23068096,
	24116672, 25165376, 26214208, 27262528, 28311488, 29359808, 30406976,
	31456192, 32505664, 33554368, 34600256, 35650624, 36699968, 37747904,
	38795584, 39844928, 40894144, 41942848, 42991552, 44039104, 45088448,
	46136768, 47185856, 48234176, 49283008, 50331584, 51379904, 52427968,
	53475776, 54525248, 55574336, 56621888, 57671104, 58720192, 59768512,
	60817216, 61865792, 62910784, 63960896, 65009216, 66060224, 67108672,
	68157248, 69205568, 70253888, 71303104, 72350144, 73400128, 74448832,
	75497024, 76545856, 77593664, 78642496, 79690816, 80740288, 81786304,
	82835776, 83886016, 84934336, 85982656, 87031744, 88079168, 89128384,
	90177088, 91223744, 92273344, 93322816, 94371776, 95420224, 96468544,
	97517248, 98565568, 99614272, 100662592, 101711296, 102760384, 103808576,
	104854592, 105903296, 106954304, 108003136, 109049792, 110099648, 111148864,
	112196416, 113244224, 114294592, 115343296, 116391488, 117440192, 118489024,
	119537344, 120584512, 121634752, 122682944, 123731264, 124778048, 125829056,
	126876608, 127925696, 128973632, 130023104, 131071552, 132120256, 133168832,
	134217152, 135265472, 136313792, 137363392, 138411584, 139460032, 140508352,
	141556544, 142606144, 143653696, 144701888, 145751488, 146800448, 147848768,
	148897088, 149943616, 150993088, 152042944, 153091648, 154139968, 155188928,
	156237376, 157284416, 158334656, 159381568, 160430656, 161480512, 162529216,
	163577408, 164625856, 165674944, 166722496, 167771584, 168819136, 169866304,
	170917696, 171966272, 173014208, 174063424, 175109696, 176159936, 177209152,
	178257472, 179305024, 180354752, 181402688, 182451904, 183494848, 184548928,
	185596352, 186645952, 187693504, 188743616, 189791936, 190840768, 191888192,
	192937792, 193985984, 195035072, 196083392, 197130688, 198180544, 199228352,
	200276672, 201326144, 202374464, 203423296, 204472256, 205517632, 206569024,
	207616832, 208666048, 209715136, 210763712, 211812032, 212860352, 213909184,
	214956992, 216005312, 217054528, 218102848, 219151936, 220200128, 221249216,
	222297536, 223345984, 224394944, 225443776, 226491712, 227539904, 228588736,
	229636928, 230684864, 231733952, 232782272, 233830592, 234880832, 235928768,
	236976448, 238026688, 239075008, 240122816, 241171904, 242220224, 243268672,
	244316608, 245365312, 246415168, 247463872, 248512064, 249560512, 250608704,
	251657792, 252706624, 253754432, 254803264, 255851072, 256900544, 257949632,
	258996544, 260045888, 261092672, 262143424, 263191744, 264241088, 265287488,
	266337728, 267386432, 268435264, 269482688, 270531904, 271580992, 272629568,
	273677632, 274726208, 275775296, 276822976, 277868608, 278921152, 279969728,
	281018176, 282066496, 283115072, 284163136, 285211712, 286260928, 287308352,
	288358208, 289406528, 290453312, 291504064, 292550848, 293600192, 294649664,
	295698112, 296746816, 297794624, 298843456, 299891776, 300941248, 301989056,
	303036736, 304086976, 305131072, 306182848, 307231168, 308280512, 309329344,
	310377664, 311427008, 312475456, 313524032, 314570944, 315619904, 316669376,
	317717824, 318766528, 319815616, 320862656, 321909568, 322960576, 324009536,
	325058368, 326105792, 327154624, 328201792, 329252416, 330301376, 331349696,
	332398016, 333446336, 334495424, 335544128, 336592832, 337640896, 338689984,
	339736256, 340786496, 341835328, 342883648, 343931584, 344980928, 346030016,
	347076544, 348126656, 349175488, 350223296, 351270848, 352321472, 353369152,
	354418496, 355466816, 356514112, 357564352, 358610624, 359661376, 360708928,
	361758016, 362805056, 363855424, 364904128, 365950528, 366998848, 368047808,
	369096256, 370147264, 371195584, 372243392, 373291456, 374341568, 375389888,
	376437184, 377485376, 378534976, 379581632, 380633024, 381681472, 382729664,
	383778496, 384825536, 385875136, 386923456, 387971392, 389020864, 390067648,
	391118656, 392166976, 393215936, 394264384, 395311808, 396360512, 397409728,
	398458688, 399504832, 400555328, 401603392, 402652736, 403701184, 404750272,
	405798208, 406846912, 407895232, 408943936, 409991872, 411041216, 412090304,
	413136832, 414187328, 415233472, 416282816, 417333184, 418381504, 419428928,
	420478144, 421526848, 422575168, 423623104, 424672832, 425718848, 426769472,
	427818176, 428866496, 429915712, 430964672, 432012992, 433061312, 434110016,
	435157952, 436207424, 437254592, 438304576, 439352384, 440401216, 441450176,
	442497344, 443547584, 444596032, 445644736, 446693056, 447741248, 448789568,
	449838016, 450887104, 451936064, 452984512, 454032064, 455081408, 456130496,
	457178944, 458227136, 459275584, 460324672, 461372864, 462420928, 463470272,
	464518976, 465567296, 466615232, 467663296, 468713408, 469760576, 470810176,
	471856192, 472907584, 473955008, 475003072, 476053184, 477100864, 478150336,
	479196992, 480247616, 481294144, 482344768, 483393088, 484440896, 485490496,
	486537664, 487587136, 488635712, 489682496, 490733504, 491781824, 492830656,
	493878208, 494926912, 495975104, 497024576, 498072128, 499122112, 500170432,
	501217088, 502267328, 503315264, 504364352, 505412032, 506461888, 507509312,
	508558912, 509606848, 510654784, 511705024, 512752832, 513801664, 514849856,
	515897024, 516945344, 517996096, 519042752, 520092992, 521141696, 522190016,
	523236928, 524287424, 525336512, 526384832, 527433152, 528481984, 529529536,
	530579008, 531627968, 532676416, 533724992, 534772928, 535822016, 536869952,
	537918016, 538960064, 540014912, 541065152, 542112448, 543161792, 544210496,
	545257408, 546306752, 547356352, 548404672, 549453376, 550501568, 551548736,
	552598976, 553646528, 554695744, 555745088, 556793152, 557842112, 558889792,
	559939136, 560987968, 562035008, 563084864, 564132928, 565181504, 566230976,
	567276992, 568326848, 569376448, 570424768, 571472192, 572522432, 573570496,
	574616384, 575665984, 576715712, 577763776, 578813888, 579862336, 580910912,
	581958976, 583006912, 584056768, 585102656, 586153664, 587202368, 588251072,
	589298368, 590348224, 591393472, 592445248, 593492672, 594538432, 595590208,
	596639552, 597687232, 598735936, 599784256, 600833984, 601881536, 602930752,
	603979456, 605027776, 606076096, 607125184, 608172608, 609220672, 610270016,
	611317568, 612366016, 613416896, 614464832, 615511744, 616562368, 617610944,
	618659264, 619706816, 620756672, 621805376, 622853824, 623902016, 624951232,
	625999168, 627046592, 628095808, 629145152, 630193856, 631241536, 632289344,
	633336896, 634388032, 635436352, 636484928, 637533632, 638581696, 639630272,
	640677952, 641726656, 642774464, 643824704, 644874176, 645922496, 646971328,
	648019648, 649066688, 650117056, 651165248, 652212928, 653262656, 654309952,
	655359296, 656407616, 657457088, 658505024, 659553344, 660602816, 661650368,
	662698688, 663747776, 664795328, 665845696, 666893888, 667942592, 668990272,
	670039232, 671088064, 672137152, 673185728, 674233792, 675280832, 676331456,
	677379904, 678428096, 679477184, 680524352, 681573952, 682622912, 683669696,
	684718784, 685768256, 686816576, 687865792, 688909504, 689962304, 691011392,
	692059072, 693107264, 694156352, 695205824, 696253504, 697302976, 698350784,
	699398464, 700448704, 701496896, 702544576, 703592768, 704642368, 705691072,
	706740032, 707787968, 708836672, 709885376, 710934208, 711982784, 713031232,
	714079936, 715127872, 716177216, 717225536, 718273984, 719322944, 720370624,
	721419584, 722468288, 723517376, 724565056, 725614528, 726662336, 727708736,
	728760128, 729807808, 730856512, 731905472, 732953792, 734003008, 735050048,
	736099648, 737148736, 738197056, 739246016, 740294336, 741341632, 742391488,
	743440064, 744488768, 745537472, 746585792, 747633856, 748682944, 749730496,
	750779584, 751828288, 752877248, 753925184, 754974016, 756022336, 757070528,
	758119616, 759168832, 760216768, 761265088, 762312128, 763363264, 764411456,
	765459776, 766508992, 767557312, 768606016, 769652672, 770700608, 771751744,
	772800064, 773848384, 774896576, 775946048, 776994752, 778041536, 779091392,
	780139328, 781187648, 782237504, 783285952, 784334528, 785383232, 786431936,
	787479872, 788528192, 789576512, 790626112, 791674816, 792723136, 793771456,
	794820032, 795867584, 796915648, 797962688, 799014592, 800063296, 801109696,
	802160192, 803207872, 804256576, 805305152, 806350784, 807401792, 808451648,
	809500096, 810549056, 811597376, 812645056, 813693376, 814743232, 815791168,
	816840512, 817886912, 818936128, 819983552, 821034304, 822082112, 823131328,
	824179648, 825228608, 826277824, 827325248, 828372928, 829419328, 830471744,
	831520064, 832568512, 833617088, 834666304, 835713856, 836763328, 837810752,
	838860608, 839908928, 840956608, 842005568, 843054656, 844101824, 845150528,
	846200384, 847248832, 848297536, 849346496, 850393408, 851443136, 852492224,
	853540544, 854589376, 855637312, 856684736, 857734336, 858782656, 859830592,
	860880448, 861929408, 862977088, 864023872, 865074368, 866122304, 867171776,
	868217408, 869267008, 870318016, 871366336, 872414528, 873463616, 874512064,
	875560768, 876609472, 877657408, 878706112, 879754432, 880803136, 881851456,
	882899648, 883947968, 884997952, 886046144, 887094976, 888142912, 889191232,
	890240192, 891289024, 892338112, 893386432, 894434624, 895483712, 896531648,
	897578944, 898629568, 899677888, 900726592, 901775296, 902823616, 903872192,
	904919104, 905968832, 907016384, 908065856, 909115072, 910163776, 911211584,
	912260672, 913309504, 914355776, 915406144, 916454464, 917501632, 918551488,
	919600832, 920648896, 921697856, 922744384, 923795008, 924842816, 925889344,
	926939968, 927989696, 929038016, 930086336, 931134656, 932183488, 933232448,
	934280128, 935328448, 936378176, 937425472, 938474176, 939524032, 940572608,
	941619904, 942669248, 943715776, 944765504, 945815488, 946862656, 947912512,
	948960704, 950009792, 951058112, 952106048, 953155136, 954203456, 955252544,
	956300608, 957348416, 958395584, 959446336, 960494272, 961544128, 962591296,
	963639616, 964689728, 965737664, 966786752, 967834432, 968882752, 969930688,
	970978496, 972028352, 973078336, 974124992, 975175232, 976224064, 977271616,
	978321088, 979369408, 980418368, 981466048, 982515008, 983564096, 984612544,
	985660864, 986709952, 987758528, 988806848, 989853632, 990903104, 991950016,
	993000256, 994046528, 995096384, 996147136, 997195712, 998243776, 999292864,
	1000340032, 1001388224, 1002437312, 1003486912, 1004534848, 1005584192, 1006631104,
	1007680832, 1008730048, 1009778368, 1010826944, 1011875008, 1012923712, 1013971136,
	1015019968, 1016068288, 1017116992, 1018165952, 1019215424, 1020263488, 1021312832,
	1022360128, 1023409984, 1024457792, 1025507008, 1026554944, 1027604288, 1028652224,
	1029700928, 1030749376, 1031798336, 1032846784, 1033894976, 1034944448, 1035990976,
	1037041472, 1038089152, 1039138624, 1040186816, 1041235904, 1042282816, 1043332672,
	1044381376, 1045429696, 1046477888, 1047526336, 1048574528, 1049624512, 1050672704,
	1051721408, 1052769856, 1053817792, 1054865984, 1055915072, 1056964288, 1058012992,
	1059061568, 1060108352, 1061157568, 1062206272, 1063254208, 1064302528, 1065350336,
	1066401088, 1067449664, 1068497728, 1069546304, 1070594752, 1071644608, 1072691392,
	1073741632, 1074789952, 1075838656, 1076886592, 1077936064, 1078983232, 1080032192,
	1081080256, 1082128832, 1083177152, 1084227392, 1085276096, 1086321088, 1087371328,
	1088418368, 1089469504,
}
