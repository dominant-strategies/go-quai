// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"math/big"

	"github.com/dominant-strategies/go-quai/common/hexutil"
	"github.com/dominant-strategies/go-quai/common/math"
	"github.com/dominant-strategies/go-quai/core/types"
)

var _ = (*stTransactionMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (s stTransaction) MarshalJSON() ([]byte, error) {
	type stTransaction struct {
		Nonce                math.HexOrDecimal64   `json:"nonce"`
		To                   string                `json:"to"`
		Data                 []string              `json:"data"`
		AccessLists          []*types.AccessList   `json:"accessLists,omitempty"`
		// GasLimit             []math.HexOrDecimal64 `json:"gasLimit"`
		Value                []string              `json:"value"`
		PrivateKey           hexutil.Bytes         `json:"secretKey"`
	}
	var enc stTransaction
	enc.Nonce() = math.HexOrDecimal64(s.Nonce())
	enc.To = s.To
	enc.Data = s.Data
	enc.AccessLists = s.AccessLists
	enc.Value = s.Value
	enc.PrivateKey = s.PrivateKey
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (s *stTransaction) UnmarshalJSON(input []byte) error {
	type stTransaction struct {
		// MaxPriorityFeePerGas *math.HexOrDecimal256 `json:"maxPriorityFeePerGas"`
		Nonce                *math.HexOrDecimal64  `json:"nonce"`
		To                   *string               `json:"to"`
		Data                 []string              `json:"data"`
		AccessLists          []*types.AccessList   `json:"accessLists,omitempty"`
		// GasLimit             []math.HexOrDecimal64 `json:"gasLimit"`
		Value                []string              `json:"value"`
		PrivateKey           *hexutil.Bytes        `json:"secretKey"`
	}
	var dec stTransaction
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Nonce() != nil {
		s.Nonce() = uint64(*dec.Nonce())
	}
	if dec.To != nil {
		s.To = *dec.To
	}
	if dec.Data != nil {
		s.Data = dec.Data
	}
	if dec.AccessLists != nil {
		s.AccessLists = dec.AccessLists
	}
	if dec.Value != nil {
		s.Value = dec.Value
	}
	if dec.PrivateKey != nil {
		s.PrivateKey = *dec.PrivateKey
	}
	return nil
}
