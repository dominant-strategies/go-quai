// Copyright 2020 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package core

import (
	"encoding/hex"
	"math/big"
	"testing"

	"github.com/dominant-strategies/go-quai/common"
	"github.com/dominant-strategies/go-quai/consensus"
	"github.com/dominant-strategies/go-quai/consensus/blake3pow"
	"github.com/dominant-strategies/go-quai/core/rawdb"
	"github.com/dominant-strategies/go-quai/core/state"
	"github.com/dominant-strategies/go-quai/core/types"
	"github.com/dominant-strategies/go-quai/core/vm"
	"github.com/dominant-strategies/go-quai/crypto"
	"github.com/dominant-strategies/go-quai/params"
	"github.com/holiman/uint256"
)

type MockChainContext struct {
	blocks []*types.Block
}

func (c MockChainContext) Engine() consensus.Engine {
	return nil
}
func (c MockChainContext) GetHeader(common.Hash, uint64) *types.Header {
	return c.blocks[1].Header()
}

func TestPrecompile(t *testing.T) {
	// Create a simple chain to verify
	var statedb *state.StateDB
	gen := func(i int, b *BlockGen) {
		statedb = b.statedb
	}
	var (
		testdb = rawdb.NewMemoryDatabase()
		gspec  = &Genesis{
			Config: params.TestChainConfig,
			Alloc: GenesisAlloc{
				common.HexToAddress("0x71562b71999873DB5b286dF957af199Ec94617F7"): GenesisAccount{
					Balance: big.NewInt(1000000000000000000), // 1 ether
					Nonce:   0,
				},
			},
			GasLimit:   []uint64{params.GenesisGasLimit, params.GenesisGasLimit, params.GenesisGasLimit},
			Difficulty: []*big.Int{common.Big0, common.Big0, common.Big0},
			ParentHash: []common.Hash{common.HexToHash("0"), common.HexToHash("0"), common.HexToHash("0")},
			BaseFee:    []*big.Int{common.Big0, common.Big0, common.Big0},
		}
		genesis    = gspec.MustCommit(testdb)
		signer     = types.LatestSigner(params.TestChainConfig)
		testKey, _ = crypto.HexToECDSA("b71c71a67e1177ad4e901695e1b4b9ee17ae16c6668d313eac2f96dbcda3f291")
		addr       = crypto.PubkeyToAddress(testKey.PublicKey)
		zero       = uint64(0)
		gasLimit   = GasPool(params.GenesisGasLimit)
	)
	t.Log(addr)
	common.NodeLocation = *addr.Location()
	t.Log(common.NodeLocation.Name())
	vm.InitializePrecompiles()

	toAddr := common.BytesToAddress([]byte{1})
	location := toAddr.Location()
	t.Log(location.Name())
	params.TestChainConfig.GenesisHash = genesis.Hash()
	blocks, _ := GenerateChain(params.TestChainConfig, genesis, blake3pow.NewFaker(), testdb, 2, gen)
	statedb.AddBalance(addr, big.NewInt(params.Ether*2)) // give me 2 eth
	mockContext := MockChainContext{blocks}

	inner_tx := types.InternalTx{ChainID: big.NewInt(1), Nonce: 0, GasTipCap: common.Big1, GasFeeCap: common.Big1, Gas: 100000, To: &toAddr, Value: big.NewInt(params.Ether)}
	tx, err := types.SignTx(types.NewTx(&inner_tx), signer, testKey)
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	receipt, err := ApplyTransaction(params.TestChainConfig, mockContext, &common.ZeroAddr, &gasLimit, statedb, blocks[1].Header(), tx, &zero, vm.Config{NoBaseFee: true})
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	t.Log(*receipt)
	t.Log(receipt.Status)

}

func TestCreateETX(t *testing.T) {
	// Create a simple chain to verify
	var statedb *state.StateDB
	gen := func(i int, b *BlockGen) {
		statedb = b.statedb
	}
	var (
		testdb = rawdb.NewMemoryDatabase()
		gspec  = &Genesis{
			Config: params.TestChainConfig,
			Alloc: GenesisAlloc{
				common.HexToAddress("0x71562b71999873DB5b286dF957af199Ec94617F7"): GenesisAccount{
					Balance: big.NewInt(1000000000000000000), // 1 ether
					Nonce:   0,
				},
			},
			GasLimit:   []uint64{params.GenesisGasLimit, params.GenesisGasLimit, params.GenesisGasLimit},
			Difficulty: []*big.Int{common.Big0, common.Big0, common.Big0},
			ParentHash: []common.Hash{common.HexToHash("0"), common.HexToHash("0"), common.HexToHash("0")},
			BaseFee:    []*big.Int{common.Big0, common.Big0, common.Big0},
		}
		genesis    = gspec.MustCommit(testdb)
		signer     = types.LatestSigner(params.TestChainConfig)
		testKey, _ = crypto.HexToECDSA("b71c71a67e1177ad4e901695e1b4b9ee17ae16c6668d313eac2f96dbcda3f291")
		addr       = crypto.PubkeyToAddress(testKey.PublicKey)
		zero       = uint64(0)
		gasLimit   = GasPool(params.GenesisGasLimit)
	)
	t.Log(addr)
	common.NodeLocation = *addr.Location()
	t.Log(common.NodeLocation.Name())
	toAddr := common.HexToAddress("0x3C97734DfD0376b0b1a57f48e2049A092fD89058")
	location := toAddr.Location()
	t.Log(location.Name())
	params.TestChainConfig.GenesisHash = genesis.Hash()
	blocks, _ := GenerateChain(params.TestChainConfig, genesis, blake3pow.NewFaker(), testdb, 2, gen)
	statedb.AddBalance(addr, big.NewInt(params.Ether*2)) // give me 2 eth
	mockContext := MockChainContext{blocks}

	data := make([]byte, 0, 0)
	etxGasLimit := uint256.NewInt(21000)
	gasTipCap := uint256.NewInt(1)
	gasFeeCap := uint256.NewInt(1)
	temp := etxGasLimit.Bytes32()
	data = append(data, temp[:]...)
	temp = gasTipCap.Bytes32()
	data = append(data, temp[:]...)
	temp = gasFeeCap.Bytes32()
	data = append(data, temp[:]...)

	inner_tx := types.InternalToExternalTx{ChainID: big.NewInt(1), Nonce: 0, GasTipCap: common.Big1, GasFeeCap: common.Big1, Gas: 100000, To: &toAddr, Value: big.NewInt(params.Ether), ETXGasLimit: 21000, ETXGasPrice: common.Big1, ETXGasTip: common.Big1, ETXData: []byte{}, ETXAccessList: nil}
	tx, err := types.SignTx(types.NewTx(&inner_tx), signer, testKey)
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	receipt, err := ApplyTransaction(params.TestChainConfig, mockContext, &common.ZeroAddr, &gasLimit, statedb, blocks[1].Header(), tx, &zero, vm.Config{NoBaseFee: true})
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	t.Log(types.GetInnerForTesting(receipt.Etxs[0]))
	t.Log(*receipt)
	t.Log(receipt.Status)
}

func TestExternalTokenTransfer(t *testing.T) {
	binary := ""
	// Create a simple chain to verify
	var statedb *state.StateDB
	gen := func(i int, b *BlockGen) {
		statedb = b.statedb
	}
	var (
		testdb = rawdb.NewMemoryDatabase()
		gspec  = &Genesis{
			Config: params.TestChainConfig,
			Alloc: GenesisAlloc{
				common.HexToAddress("0x71562b71999873DB5b286dF957af199Ec94617F7"): GenesisAccount{
					Balance: big.NewInt(1000000000000000000), // 1 ether
					Nonce:   0,
				},
			},
			GasLimit:   []uint64{params.GenesisGasLimit, params.GenesisGasLimit, params.GenesisGasLimit},
			Difficulty: []*big.Int{common.Big0, common.Big0, common.Big0},
			ParentHash: []common.Hash{common.HexToHash("0"), common.HexToHash("0"), common.HexToHash("0")},
			BaseFee:    []*big.Int{common.Big0, common.Big0, common.Big0},
		}
		genesis    = gspec.MustCommit(testdb)
		signer     = types.LatestSigner(params.TestChainConfig)
		testKey, _ = crypto.HexToECDSA("b71c71a67e1177ad4e901695e1b4b9ee17ae16c6668d313eac2f96dbcda3f291")
		addr       = crypto.PubkeyToAddress(testKey.PublicKey)
		zero       = uint64(0)
		gasLimit   = GasPool(params.GenesisGasLimit)
	)
	t.Log(addr)
	common.NodeLocation = *addr.Location()
	t.Log(common.NodeLocation.Name())
	location := common.HexToAddress("0x3C97734DfD0376b0b1a57f48e2049A092fD89058").Location()
	t.Log(location.Name())
	params.TestChainConfig.GenesisHash = genesis.Hash()
	blocks, _ := GenerateChain(params.TestChainConfig, genesis, blake3pow.NewFaker(), testdb, 2, gen)
	statedb.AddBalance(addr, big.NewInt(params.Ether*2)) // give me 2 eth
	mockContext := MockChainContext{blocks}
	// Deploy a contract with the proper address that gives me tokens in zone 2-1
	contract, err := hex.DecodeString(binary)
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	i := uint8(0)
	nonce := uint64(0)
	contract = append(contract, i)
	var contractAddr common.Address
	for {
		contract[len(contract)-1] = i
		contractAddr = crypto.CreateAddress(addr, nonce, contract)
		if contractAddr.IsInChainScope() {
			break
		}
		i++
	}
	inner_tx := types.InternalTx{ChainID: big.NewInt(1), Nonce: 0, GasTipCap: common.Big1, GasFeeCap: common.Big1, Gas: 4000000, To: nil, Value: common.Big0, Data: contract}
	tx, err := types.SignTx(types.NewTx(&inner_tx), signer, testKey)
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	receipt, err := ApplyTransaction(params.TestChainConfig, mockContext, &common.ZeroAddr, &gasLimit, statedb, blocks[1].Header(), tx, &zero, vm.Config{NoBaseFee: true})
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	t.Log(*receipt)
	t.Log(receipt.Status)

	if contractAddr != receipt.ContractAddress {
		t.Errorf("Expected: %s received: %s", contractAddr, receipt.ContractAddress)
		t.Fail()
	}
	// Here, set 0x02 as an approved contract for both zone 1-0 and prime
	sig := crypto.Keccak256([]byte("AddApprovedAddress(uint8,address)"))[:4]
	chain := uint256.NewInt(6)
	approvedAddress := uint256.NewInt(2)
	data := make([]byte, 0, 0)
	data = append(data, sig...)
	temp := chain.Bytes32()
	data = append(data, temp[:]...)
	temp = approvedAddress.Bytes32()
	data = append(data, temp[:]...)
	inner_tx = types.InternalTx{ChainID: big.NewInt(1), Nonce: 1, GasTipCap: common.Big1, GasFeeCap: common.Big1, Gas: 1000000, To: &contractAddr, Value: common.Big0, Data: data}
	tx, err = types.SignTx(types.NewTx(&inner_tx), signer, testKey)
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	receipt, err = ApplyTransaction(params.TestChainConfig, mockContext, &common.ZeroAddr, &gasLimit, statedb, blocks[1].Header(), tx, &zero, vm.Config{NoBaseFee: true})
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	t.Log(*receipt)
	t.Log(receipt.Status)

	data[35] = 0 // Set chain to 0
	inner_tx = types.InternalTx{ChainID: big.NewInt(1), Nonce: 2, GasTipCap: common.Big1, GasFeeCap: common.Big1, Gas: 1000000, To: &contractAddr, Value: common.Big0, Data: data}
	tx, err = types.SignTx(types.NewTx(&inner_tx), signer, testKey)
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	receipt, err = ApplyTransaction(params.TestChainConfig, mockContext, &common.ZeroAddr, &gasLimit, statedb, blocks[1].Header(), tx, &zero, vm.Config{NoBaseFee: true})
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	// Transfer 1 token from my address in zone-2-1 to zone 1-0
	sig = crypto.Keccak256([]byte("crossChainTransfer(address,uint256,uint256,uint256,uint256)"))[:4] // crossChainTransfer(address to, uint256 amount, uint256 gasLimit, uint256 minerTip, uint256 baseFee)
	to, err := uint256.FromHex("0x3C97734DfD0376b0b1a57f48e2049A092fD89058")
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	amount := uint256.NewInt(3)
	limit := uint256.NewInt(100000)
	tip := uint256.NewInt(1)
	baseFee := uint256.NewInt(1)
	data = make([]byte, 0, 0)
	data = append(data, sig...)
	temp = to.Bytes32()
	data = append(data, temp[:]...)
	temp = amount.Bytes32()
	data = append(data, temp[:]...)
	temp = limit.Bytes32()
	data = append(data, temp[:]...)
	temp = tip.Bytes32()
	data = append(data, temp[:]...)
	temp = baseFee.Bytes32()
	data = append(data, temp[:]...)
	value := tip.Add(tip, baseFee).Mul(tip, limit)
	inner_tx = types.InternalTx{ChainID: big.NewInt(1), Nonce: 3, GasTipCap: common.Big1, GasFeeCap: common.Big1, Gas: 1000000, To: &contractAddr, Value: value.ToBig(), Data: data}
	tx, err = types.SignNewTx(testKey, signer, &inner_tx)
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	//tracer := vm.NewMarkdownLogger(nil, os.Stdout)
	receipt, err = ApplyTransaction(params.TestChainConfig, mockContext, &common.ZeroAddr, &gasLimit, statedb, blocks[1].Header(), tx, &zero, vm.Config{Debug: false, Tracer: nil, NoBaseFee: true})
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	t.Log(*receipt)
	t.Log(receipt.Status)
	//vm.WriteTrace(os.Stdout, tracer.StructLogs())
	t.Log(*receipt.Etxs[0])
	// Apply the generated ETX that calls incomingTransfer(). This ETX came from zone-2-1 (our location) but we pretend it came from Prime.
	etx := types.GetInnerForTesting(receipt.Etxs[0]).(*types.ExternalTx)
	sender := etx.Sender
	t.Log(sender.Location().Name())
	etx.Sender = *etx.To
	etx.To = &sender // swap sender and to (pretend it came from somewhere else)
	tx, err = types.SignNewTx(testKey, signer, etx)
	receipt, err = ApplyTransaction(params.TestChainConfig, mockContext, &common.ZeroAddr, &gasLimit, statedb, blocks[1].Header(), tx, &zero, vm.Config{Debug: false, Tracer: nil, NoBaseFee: true})
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	t.Log(*receipt)
	t.Log(receipt.Status)
	// Check balance
	sig = crypto.Keccak256([]byte("balanceOf(address)"))[:4]
	data = make([]byte, 0, 0)
	data = append(data, sig...)
	temp = to.Bytes32() // same 'to' address from above
	data = append(data, temp[:]...)
	msg := types.NewMessage(common.ZeroAddr, &contractAddr, 0, common.Big0, limit.Uint64(), common.Big0, common.Big0, common.Big0, data, nil, false)
	// Apply the transaction to the current state (included in the env).
	blockContext := NewEVMBlockContext(blocks[1].Header(), mockContext, &common.ZeroAddr)
	vmenv := vm.NewEVM(blockContext, vm.TxContext{}, statedb, params.TestChainConfig, vm.Config{NoBaseFee: true})
	result, err := ApplyMessage(vmenv, msg, &gasLimit)
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	t.Log(result.Return())
	balance := big.Int{}
	balance.SetBytes(result.Return())
	if amount.ToBig().Cmp(&balance) != 0 {
		t.Errorf("Have: %s Want: %s", balance.String(), amount.String())
		t.Fail()
	}
}

func TestInboundETX(t *testing.T) {
	// Create a simple chain to verify
	var statedb *state.StateDB
	gen := func(i int, b *BlockGen) {
		statedb = b.statedb
	}
	var (
		testdb = rawdb.NewMemoryDatabase()
		gspec  = &Genesis{
			Config: params.TestChainConfig,
			Alloc: GenesisAlloc{
				common.HexToAddress("0x71562b71999873DB5b286dF957af199Ec94617F7"): GenesisAccount{
					Balance: big.NewInt(1000000000000000000), // 1 ether
					Nonce:   0,
				},
			},
			GasLimit:   []uint64{params.GenesisGasLimit, params.GenesisGasLimit, params.GenesisGasLimit},
			Difficulty: []*big.Int{common.Big0, common.Big0, common.Big0},
			ParentHash: []common.Hash{common.HexToHash("0"), common.HexToHash("0"), common.HexToHash("0")},
			BaseFee:    []*big.Int{common.Big0, common.Big0, common.Big0},
		}
		genesis  = gspec.MustCommit(testdb)
		to       = common.HexToAddress("0x5A457339697CB56E5a9BfA5267eA80d2c6375d98")
		sender   = common.HexToAddress("0x70bcCc6AC5437Bb4339e2D86291bC67Be83a5484")
		gasLimit = GasPool(params.GenesisGasLimit)
		zero     = uint64(0)
	)
	common.NodeLocation = *to.Location()
	params.TestChainConfig.GenesisHash = genesis.Hash()
	blocks, _ := GenerateChain(params.TestChainConfig, genesis, blake3pow.NewFaker(), testdb, 2, gen)
	mockContext := MockChainContext{blocks}
	lastBlock := blocks[len(blocks)-1]
	etxSet := make(types.EtxSet)
	etx := types.ExternalTx{Nonce: 0, GasTipCap: common.Big1, GasFeeCap: common.Big1, Gas: 100000, To: &to, Value: big.NewInt(500000000000000000), Data: []byte{}, AccessList: nil, Sender: sender}
	tx := types.NewTx(&etx)
	transactions := types.Transactions{tx}
	etxSet.Update(transactions, lastBlock.NumberU64())
	rawdb.WriteEtxSet(testdb, lastBlock.Hash(), lastBlock.NumberU64(), etxSet)
	receipt, err := ApplyTransaction(params.TestChainConfig, mockContext, &common.ZeroAddr, &gasLimit, statedb, lastBlock.Header(), tx, &zero, vm.Config{NoBaseFee: true})
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	balance, err := statedb.GetBalance(to)
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	if balance.Cmp(big.NewInt(500000000000000000)) != 0 {
		t.Errorf("Have: %d Want: %d", balance.Int64(), 500000000000000000)
		t.Fail()
	}
	t.Log(*receipt)
	t.Log(receipt.Status)
	t.Log(balance.Int64())
}

func TestInvalidInboundETX(t *testing.T) {
	// Create a simple chain to verify
	var statedb *state.StateDB
	gen := func(i int, b *BlockGen) {
		statedb = b.statedb
	}
	var (
		testdb = rawdb.NewMemoryDatabase()
		gspec  = &Genesis{
			Config: params.TestChainConfig,
			Alloc: GenesisAlloc{
				common.HexToAddress("0x71562b71999873DB5b286dF957af199Ec94617F7"): GenesisAccount{
					Balance: big.NewInt(1000000000000000000), // 1 ether
					Nonce:   0,
				},
			},
			GasLimit:   []uint64{params.GenesisGasLimit, params.GenesisGasLimit, params.GenesisGasLimit},
			Difficulty: []*big.Int{common.Big0, common.Big0, common.Big0},
			ParentHash: []common.Hash{common.HexToHash("0"), common.HexToHash("0"), common.HexToHash("0")},
			BaseFee:    []*big.Int{common.Big0, common.Big0, common.Big0},
		}
		genesis  = gspec.MustCommit(testdb)
		to       = common.HexToAddress("0x5A457339697CB56E5a9BfA5267eA80d2c6375d98")
		sender   = common.HexToAddress("0x70bcCc6AC5437Bb4339e2D86291bC67Be83a5484")
		gasLimit = GasPool(params.GenesisGasLimit)
		zero     = uint64(0)
	)
	common.NodeLocation = *to.Location()
	params.TestChainConfig.GenesisHash = genesis.Hash()
	blocks, _ := GenerateChain(params.TestChainConfig, genesis, blake3pow.NewFaker(), testdb, 2, gen)
	mockContext := MockChainContext{blocks}
	lastBlock := blocks[len(blocks)-1]
	etx := types.ExternalTx{Nonce: 0, GasTipCap: common.Big1, GasFeeCap: common.Big1, Gas: 100000, To: &to, Value: big.NewInt(500000000000000000), Data: []byte{}, AccessList: nil, Sender: sender}
	tx := types.NewTx(&etx)
	_, err := ApplyTransaction(params.TestChainConfig, mockContext, &common.ZeroAddr, &gasLimit, statedb, lastBlock.Header(), tx, &zero, vm.Config{NoBaseFee: true})
	if err == nil {
		t.Fail()
	}
	t.Error(err.Error())
}

// 60806040
func TestOpETX(t *testing.T) {
	// Create a simple chain to verify
	var statedb *state.StateDB
	gen := func(i int, b *BlockGen) {
		statedb = b.statedb
	}
	var (
		testdb = rawdb.NewMemoryDatabase()
		gspec  = &Genesis{
			Config: params.TestChainConfig,
			Alloc: GenesisAlloc{
				common.HexToAddress("0x71562b71999873DB5b286dF957af199Ec94617F7"): GenesisAccount{
					Balance: big.NewInt(1000000000000000000), // 1 ether
					Nonce:   0,
				},
			},
			GasLimit:   []uint64{params.GenesisGasLimit, params.GenesisGasLimit, params.GenesisGasLimit},
			Difficulty: []*big.Int{common.Big0, common.Big0, common.Big0},
			ParentHash: []common.Hash{common.HexToHash("0"), common.HexToHash("0"), common.HexToHash("0")},
			BaseFee:    []*big.Int{common.Big0, common.Big0, common.Big0},
		}
		genesis    = gspec.MustCommit(testdb)
		signer     = types.LatestSigner(params.TestChainConfig)
		testKey, _ = crypto.HexToECDSA("b71c71a67e1177ad4e901695e1b4b9ee17ae16c6668d313eac2f96dbcda3f291")
		addr       = crypto.PubkeyToAddress(testKey.PublicKey)
		zero       = uint64(0)
		gasLimit   = GasPool(params.GenesisGasLimit)
	)
	t.Log(addr)
	common.NodeLocation = *addr.Location()
	params.TestChainConfig.GenesisHash = genesis.Hash()
	blocks, _ := GenerateChain(params.TestChainConfig, genesis, blake3pow.NewFaker(), testdb, 2, gen)
	statedb.AddBalance(addr, big.NewInt(params.Ether*2)) // give me 2 eth
	mockContext := MockChainContext{blocks}
	//contract, err := hex.DecodeString("6080604052600060006000600060016001620186a06706f05b59d3b20000735a457339697cb56e5a9bfa5267ea80d2c6375d986000f660008060393d393df3")
	contract, err := hex.DecodeString("60806040526000806000806000600180620186a06706f05b59d3b20000735a457339697cb56e5a9bfa5267ea80d2c6375d986000f690505060698060446000396000f3fe6080604052600080fdfea2646970667358221220d51a551dccdf100829b6e928e928be7c4b803430100a5e618686c4ab3d17280964736f6c63782c302e382e31382d646576656c6f702e323032322e31312e372b636f6d6d69742e32636336363130652e6d6f64005d")
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	i := uint8(0)
	nonce := uint64(0)
	contract = append(contract, i)
	for {
		contract[len(contract)-1] = i
		contractAddr := crypto.CreateAddress(addr, nonce, contract)
		if contractAddr.IsInChainScope() {
			break
		}
		i++
	}
	inner_tx := types.InternalTx{ChainID: big.NewInt(1), Nonce: 0, GasTipCap: common.Big1, GasFeeCap: common.Big1, Gas: 100000, To: nil, Value: big.NewInt(params.Ether), Data: contract}
	tx, err := types.SignTx(types.NewTx(&inner_tx), signer, testKey)
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	receipt, err := ApplyTransaction(params.TestChainConfig, mockContext, &common.ZeroAddr, &gasLimit, statedb, blocks[1].Header(), tx, &zero, vm.Config{NoBaseFee: true})
	if err != nil {
		t.Error(err.Error())
		t.Fail()
	}
	t.Log(types.GetInnerForTesting(receipt.Etxs[0]))
	t.Log(receipt.Status)

}

// TestStateProcessorErrors tests the output from the 'core' errors
// as defined in core/error.go. These errors are generated when the
// blockchain imports bad blocks, meaning blocks which have valid headers but
// contain invalid transactions
func TestStateProcessorErrors(t *testing.T) {
	var (
		config = &params.ChainConfig{
			ChainID:             big.NewInt(1),
			HomesteadBlock:      big.NewInt(0),
			EIP150Block:         big.NewInt(0),
			EIP155Block:         big.NewInt(0),
			EIP158Block:         big.NewInt(0),
			ByzantiumBlock:      big.NewInt(0),
			ConstantinopleBlock: big.NewInt(0),
			PetersburgBlock:     big.NewInt(0),
			IstanbulBlock:       big.NewInt(0),
			MuirGlacierBlock:    big.NewInt(0),
			BerlinBlock:         big.NewInt(0),
			LondonBlock:         big.NewInt(0),
			Blake3pow:           new(params.Blake3powConfig),
		}
		signer     = types.LatestSigner(config)
		testKey, _ = crypto.HexToECDSA("b71c71a67e1177ad4e901695e1b4b9ee17ae16c6668d313eac2f96dbcda3f291")
	)
	var makeTx = func(nonce uint64, to common.Address, amount *big.Int, gasLimit uint64, gasPrice *big.Int, data []byte) *types.Transaction {
		tx, _ := types.SignTx(types.NewTx(&types.InternalTx{ChainID: big.NewInt(9000), Nonce: nonce, GasTipCap: common.Big0, GasFeeCap: gasPrice, Gas: gasLimit, To: &to, Value: amount, Data: data}), signer, testKey)
		return tx
	}
	var mkDynamicTx = func(nonce uint64, to common.Address, gasLimit uint64, gasTipCap, gasFeeCap *big.Int) *types.Transaction {
		tx, _ := types.SignTx(types.NewTx(&types.InternalTx{
			Nonce:     nonce,
			GasTipCap: gasTipCap,
			GasFeeCap: gasFeeCap,
			Gas:       gasLimit,
			To:        &to,
			Value:     big.NewInt(0),
		}), signer, testKey)
		return tx
	}
	{ // Tests against a 'recent' chain definition
		var (
			db    = rawdb.NewMemoryDatabase()
			gspec = &Genesis{
				Config: config,
				Alloc: GenesisAlloc{
					common.HexToAddress("0x71562b71999873DB5b286dF957af199Ec94617F7"): GenesisAccount{
						Balance: big.NewInt(1000000000000000000), // 1 ether
						Nonce:   0,
					},
				},
			}
			_             = gspec.MustCommit(db)
			blockchain, _ = NewHeaderChain(db, blake3pow.NewFaker(), gspec.Config, nil, vm.Config{})
		)
		defer blockchain.Stop()
		bigNumber := new(big.Int).SetBytes(common.FromHex("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"))
		tooBigNumber := new(big.Int).Set(bigNumber)
		tooBigNumber.Add(tooBigNumber, common.Big1)
		for i, tt := range []struct {
			txs  []*types.Transaction
			want string
		}{
			{ // ErrNonceTooLow
				txs: []*types.Transaction{
					makeTx(0, common.Address{}, big.NewInt(0), params.TxGas, big.NewInt(875000000), nil),
					makeTx(0, common.Address{}, big.NewInt(0), params.TxGas, big.NewInt(875000000), nil),
				},
				want: "could not apply tx 1 [0x0026256b3939ed97e2c4a6f3fce8ecf83bdcfa6d507c47838c308a1fb0436f62]: nonce too low: address 0x71562b71999873DB5b286dF957af199Ec94617F7, tx: 0 state: 1",
			},
			{ // ErrNonceTooHigh
				txs: []*types.Transaction{
					makeTx(100, common.Address{}, big.NewInt(0), params.TxGas, big.NewInt(875000000), nil),
				},
				want: "could not apply tx 0 [0xdebad714ca7f363bd0d8121c4518ad48fa469ca81b0a081be3d10c17460f751b]: nonce too high: address 0x71562b71999873DB5b286dF957af199Ec94617F7, tx: 100 state: 0",
			},
			{ // ErrGasLimitReached
				txs: []*types.Transaction{
					makeTx(0, common.Address{}, big.NewInt(0), 21000000, big.NewInt(875000000), nil),
				},
				want: "could not apply tx 0 [0xbd49d8dadfd47fb846986695f7d4da3f7b2c48c8da82dbc211a26eb124883de9]: gas limit reached",
			},
			{ // ErrInsufficientFundsForTransfer
				txs: []*types.Transaction{
					makeTx(0, common.Address{}, big.NewInt(1000000000000000000), params.TxGas, big.NewInt(875000000), nil),
				},
				want: "could not apply tx 0 [0x98c796b470f7fcab40aaef5c965a602b0238e1034cce6fb73823042dd0638d74]: insufficient funds for gas * price + value: address 0x71562b71999873DB5b286dF957af199Ec94617F7 have 1000000000000000000 want 1000018375000000000",
			},
			{ // ErrInsufficientFunds
				txs: []*types.Transaction{
					makeTx(0, common.Address{}, big.NewInt(0), params.TxGas, big.NewInt(900000000000000000), nil),
				},
				want: "could not apply tx 0 [0x4a69690c4b0cd85e64d0d9ea06302455b01e10a83db964d60281739752003440]: insufficient funds for gas * price + value: address 0x71562b71999873DB5b286dF957af199Ec94617F7 have 1000000000000000000 want 18900000000000000000000",
			},
			// ErrGasUintOverflow
			// One missing 'core' error is ErrGasUintOverflow: "gas uint64 overflow",
			// In order to trigger that one, we'd have to allocate a _huge_ chunk of data, such that the
			// multiplication len(data) +gas_per_byte overflows uint64. Not testable at the moment
			{ // ErrIntrinsicGas
				txs: []*types.Transaction{
					makeTx(0, common.Address{}, big.NewInt(0), params.TxGas-1000, big.NewInt(875000000), nil),
				},
				want: "could not apply tx 0 [0xcf3b049a0b516cb4f9274b3e2a264359e2ba53b2fb64b7bda2c634d5c9d01fca]: intrinsic gas too low: have 20000, want 21000",
			},
			{ // ErrGasLimitReached
				txs: []*types.Transaction{
					makeTx(0, common.Address{}, big.NewInt(0), params.TxGas*1000, big.NewInt(875000000), nil),
				},
				want: "could not apply tx 0 [0xbd49d8dadfd47fb846986695f7d4da3f7b2c48c8da82dbc211a26eb124883de9]: gas limit reached",
			},
			{ // ErrFeeCapTooLow
				txs: []*types.Transaction{
					mkDynamicTx(0, common.Address{}, params.TxGas, big.NewInt(0), big.NewInt(0)),
				},
				want: "could not apply tx 0 [0xc4ab868fef0c82ae0387b742aee87907f2d0fc528fc6ea0a021459fb0fc4a4a8]: max fee per gas less than block base fee: address 0x71562b71999873DB5b286dF957af199Ec94617F7, maxFeePerGas: 0 baseFee: 875000000",
			},
			{ // ErrTipVeryHigh
				txs: []*types.Transaction{
					mkDynamicTx(0, common.Address{}, params.TxGas, tooBigNumber, big.NewInt(1)),
				},
				want: "could not apply tx 0 [0x15b8391b9981f266b32f3ab7da564bbeb3d6c21628364ea9b32a21139f89f712]: max priority fee per gas higher than 2^256-1: address 0x71562b71999873DB5b286dF957af199Ec94617F7, maxPriorityFeePerGas bit length: 257",
			},
			{ // ErrFeeCapVeryHigh
				txs: []*types.Transaction{
					mkDynamicTx(0, common.Address{}, params.TxGas, big.NewInt(1), tooBigNumber),
				},
				want: "could not apply tx 0 [0x48bc299b83fdb345c57478f239e89814bb3063eb4e4b49f3b6057a69255c16bd]: max fee per gas higher than 2^256-1: address 0x71562b71999873DB5b286dF957af199Ec94617F7, maxFeePerGas bit length: 257",
			},
			{ // ErrTipAboveFeeCap
				txs: []*types.Transaction{
					mkDynamicTx(0, common.Address{}, params.TxGas, big.NewInt(2), big.NewInt(1)),
				},
				want: "could not apply tx 0 [0xf987a31ff0c71895780a7612f965a0c8b056deb54e020bb44fa478092f14c9b4]: max priority fee per gas higher than max fee per gas: address 0x71562b71999873DB5b286dF957af199Ec94617F7, maxPriorityFeePerGas: 2, maxFeePerGas: 1",
			},
			{ // ErrInsufficientFunds
				// Available balance:           1000000000000000000
				// Effective cost:                   18375000021000
				// FeeCap * gas:                1050000000000000000
				// This test is designed to have the effective cost be covered by the balance, but
				// the extended requirement on FeeCap*gas < balance to fail
				txs: []*types.Transaction{
					mkDynamicTx(0, common.Address{}, params.TxGas, big.NewInt(1), big.NewInt(50000000000000)),
				},
				want: "could not apply tx 0 [0x413603cd096a87f41b1660d3ed3e27d62e1da78eac138961c0a1314ed43bd129]: insufficient funds for gas * price + value: address 0x71562b71999873DB5b286dF957af199Ec94617F7 have 1000000000000000000 want 1050000000000000000",
			},
			{ // Another ErrInsufficientFunds, this one to ensure that feecap/tip of max u256 is allowed
				txs: []*types.Transaction{
					mkDynamicTx(0, common.Address{}, params.TxGas, bigNumber, bigNumber),
				},
				want: "could not apply tx 0 [0xd82a0c2519acfeac9a948258c47e784acd20651d9d80f9a1c67b4137651c3a24]: insufficient funds for gas * price + value: address 0x71562b71999873DB5b286dF957af199Ec94617F7 have 1000000000000000000 want 2431633873983640103894990685182446064918669677978451844828609264166175722438635000",
			},
		} {
			var err error
			//block := GenerateBadBlock(genesis, blake3pow.NewFaker(), tt.txs, gspec.Config)
			//_, err := blockchain.InsertChain(types.Blocks{block})
			if err == nil {
				t.Fatal("block imported without errors")
			}
			if have, want := err.Error(), tt.want; have != want {
				t.Errorf("test %d:\nhave \"%v\"\nwant \"%v\"\n", i, have, want)
			}
		}
	}
}
