syntax = "proto3";

package block;
option go_package = "github.com/dominant-strategies/go-quai/core/types";

import "common/proto_common.proto";

message ProtoHeader {
  repeated common.ProtoHash parent_hash = 1;
  optional common.ProtoHash uncle_hash = 2;
  optional common.ProtoHash evm_root = 3;
  optional common.ProtoHash tx_hash = 4;
  optional common.ProtoHash etx_hash = 5;
  optional common.ProtoHash etx_rollup_hash = 6;
  repeated common.ProtoHash manifest_hash = 7;
  optional common.ProtoHash receipt_hash = 8;
  optional bytes difficulty = 9;
  repeated bytes parent_entropy = 10;
  repeated bytes parent_delta_s = 11;
  repeated bytes parent_uncled_sub_delta_s = 12;
  optional bytes uncled_s = 13;
  repeated bytes number = 14;
  optional uint64 gas_limit = 15;
  optional uint64 gas_used = 16;
  optional bytes base_fee = 17;
  optional common.ProtoLocation location = 18;
  optional bytes extra = 19;
  optional common.ProtoHash mix_hash = 20;
  optional uint64 nonce = 21;
  optional common.ProtoHash utxo_root = 22;
  optional common.ProtoHash etx_set_root = 23;
  optional uint64 efficiency_score = 24;
  optional uint64 threshold_count = 25;
  optional uint64 expansion_number = 26;
  optional common.ProtoHash etx_eligible_slices = 27;
  optional common.ProtoHash prime_terminus = 28;
  optional common.ProtoHash interlink_root_hash = 29;
  optional uint64 state_limit = 30;
  optional uint64 state_used = 31;
  optional bytes quai_state_size = 32;
}

message ProtoTransaction {
  optional uint64 type = 1;
  optional bytes to = 2;
  optional uint64 nonce = 3;
  optional bytes value = 4;
  optional uint64 gas = 5;
  optional bytes data = 6;
  optional bytes chain_id = 7;
  optional bytes gas_fee_cap = 8;
  optional bytes gas_tip_cap = 9;
  optional ProtoAccessList access_list = 10;
  optional bytes v = 11;
  optional bytes r = 12;
  optional bytes s = 13;
  optional common.ProtoHash originating_tx_hash = 14;
  optional uint32 etx_index = 15;
  optional ProtoTxIns tx_ins = 16;
  optional ProtoTxOuts tx_outs = 17;
  optional bytes signature = 18;
  optional bytes etx_sender = 19;
  optional common.ProtoHash parent_hash = 20;
  optional common.ProtoHash mix_hash = 21;
  optional uint64 work_nonce = 22;
  optional bool is_coinbase = 23;
}

message ProtoTransactions { repeated ProtoTransaction transactions = 1; }

message ProtoHeaders { repeated ProtoHeader headers = 1; }

message ProtoManifest { repeated common.ProtoHash manifest = 1; }

message ProtoAccessList { repeated ProtoAccessTuple access_tuples = 1; }

message ProtoWorkObjectHeader {
  optional common.ProtoHash header_hash = 1;
  optional common.ProtoHash parent_hash = 2;
  optional bytes number = 3;
  optional bytes difficulty = 4;
  optional common.ProtoHash tx_hash = 5;
  optional uint64 nonce = 6;
  optional common.ProtoLocation location = 7;
  optional common.ProtoHash mix_hash = 8;
  optional uint64 time = 9;
  optional bytes prime_terminus_number = 10;
  optional common.ProtoAddress coinbase = 11;
}

message ProtoWorkObjectHeaders {
  repeated ProtoWorkObjectHeader wo_headers = 1;
}

message ProtoWorkObjectBody {
  optional ProtoHeader header = 1;
  optional ProtoTransactions transactions = 2;
  optional ProtoWorkObjectHeaders uncles = 3;
  optional ProtoTransactions ext_transactions = 4;
  optional ProtoManifest manifest = 5;
  optional common.ProtoHashes interlink_hashes = 6;
}

message ProtoWorkObject {
  optional ProtoWorkObjectHeader wo_header = 1;
  optional ProtoWorkObjectBody wo_body = 2;
  optional ProtoTransaction tx = 3;
}

message ProtoWorkObjects { repeated ProtoWorkObject work_objects = 1; }

message ProtoWorkObjectBlockView {
    optional ProtoWorkObject work_object = 1;
}

message ProtoWorkObjectBlocksView {
  repeated ProtoWorkObjectBlockView work_objects = 1;
}

message ProtoWorkObjectHeaderView {
    optional ProtoWorkObject work_object = 1;
}

message ProtoWorkObjectShareView {
  optional ProtoWorkObject  work_object = 1;
}

message ProtoAccessTuple {
  bytes address = 1;
  repeated common.ProtoHash storage_key = 2;
}

message ProtoReceiptForStorage {
  bytes post_state_or_status = 1;
  uint64 cumulative_gas_used = 2;
  common.ProtoHash tx_hash = 3;
  common.ProtoAddress contract_address = 4;
  ProtoLogsForStorage logs = 5;
  ProtoTransactions etxs = 6;
  uint64 gas_used = 7;
}

message ProtoReceiptsForStorage {
  repeated ProtoReceiptForStorage receipts = 1;
}

message ProtoLogForStorage {
  common.ProtoAddress address = 1;
  repeated common.ProtoHash topics = 2;
  bytes data = 3;
}

message ProtoLogsForStorage { repeated ProtoLogForStorage logs = 1; }

message ProtoPendingHeader {
  optional ProtoWorkObject wo = 1;
  optional ProtoTermini termini = 2;
}

message ProtoTermini {
  repeated common.ProtoHash dom_termini = 1;
  repeated common.ProtoHash sub_termini = 2;
}

message ProtoEtxSet { optional bytes etx_hashes = 1; }

message ProtoPendingEtxs {
  optional ProtoWorkObject header = 1;
  optional ProtoTransactions etxs = 2;
}

message ProtoPendingEtxsRollup {
  optional ProtoWorkObject header = 1;
  optional ProtoTransactions etxs_rollup = 2;
}

message ProtoTxIns { repeated ProtoTxIn tx_ins = 1; }

message ProtoTxOuts { repeated ProtoTxOut tx_outs = 1; }

message ProtoTxIn {
  optional ProtoOutPoint previous_out_point = 1;
  optional bytes pub_key = 2;
}

message ProtoOutPoint {
  optional common.ProtoHash hash = 1;
  optional uint32 index = 2;
}

message ProtoTxOut {
  optional uint32 denomination = 1;
  optional bytes address = 2;
  optional bytes lock = 3;
}

message ProtoOutPointAndDenomination {
  optional common.ProtoHash hash = 1;
  optional uint32 index = 2;
  optional uint32 denomination = 3;
}

message ProtoAddressOutPoints {
  map<string, ProtoOutPointAndDenomination> out_points = 1;
}

message ProtoOutPointsMap {
  map<string, ProtoAddressOutPoints> entries = 1;
}
