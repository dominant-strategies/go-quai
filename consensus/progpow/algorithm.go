// Copyright 2017 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package progpow

import (
	"encoding/binary"
	"hash"
	"math/big"
	"reflect"
	"runtime"
	"runtime/debug"
	"sync"
	"sync/atomic"
	"time"
	"unsafe"

	"golang.org/x/crypto/sha3"

	"github.com/dominant-strategies/go-quai/common"
	"github.com/dominant-strategies/go-quai/common/bitutil"
	"github.com/dominant-strategies/go-quai/crypto"
	"github.com/dominant-strategies/go-quai/log"
)

const (
	datasetInitBytes   = 1 << 32 // Bytes in dataset at genesis
	datasetGrowthBytes = 3 << 26 // Dataset growth per epoch
	cacheInitBytes     = 1 << 24 // Bytes in cache at genesis
	cacheGrowthBytes   = 3 << 21 // Cache growth per epoch
	mixBytes           = 128     // Width of mix
	hashBytes          = 64      // Hash length in bytes
	hashWords          = 16      // Number of 32 bit ints in a hash
	datasetParents     = 512     // Number of parents of each dataset element
	cacheRounds        = 3       // Number of rounds in cache production
	loopAccesses       = 64      // Number of accesses in hashimoto loop
)

var (
	C_epochLength = uint64(285000) // Number of prime blocks in an epoch
)

// cacheSize returns the size of the ethash verification cache that belongs to a certain
// block number.
func cacheSize(block uint64) uint64 {
	epoch := int(block / C_epochLength)
	if epoch < maxCachedEpoch {
		return cacheSizes[epoch]
	}
	return calcCacheSize(epoch)
}

// calcCacheSize calculates the cache size for epoch. The cache size grows linearly,
// however, we always take the highest prime below the linearly growing threshold in order
// to reduce the risk of accidental regularities leading to cyclic behavior.
func calcCacheSize(epoch int) uint64 {
	size := cacheInitBytes + cacheGrowthBytes*uint64(epoch) - hashBytes
	for !new(big.Int).SetUint64(size / hashBytes).ProbablyPrime(1) { // Always accurate for n < 2^64
		size -= 2 * hashBytes
	}
	return size
}

// datasetSize returns the size of the ethash mining dataset that belongs to a certain
// block number.
func datasetSize(block uint64) uint64 {
	epoch := int(block / C_epochLength)
	if epoch < maxCachedEpoch {
		return datasetSizes[epoch]
	}
	return calcDatasetSize(epoch)
}

// calcDatasetSize calculates the dataset size for epoch. The dataset size grows linearly,
// however, we always take the highest prime below the linearly growing threshold in order
// to reduce the risk of accidental regularities leading to cyclic behavior.
func calcDatasetSize(epoch int) uint64 {
	size := datasetInitBytes + datasetGrowthBytes*uint64(epoch) - mixBytes
	for !new(big.Int).SetUint64(size / mixBytes).ProbablyPrime(1) { // Always accurate for n < 2^64
		size -= 2 * mixBytes
	}
	return size
}

// hasher is a repetitive hasher allowing the same hash data structures to be
// reused between hash runs instead of requiring new ones to be created.
type hasher func(dest []byte, data []byte)

// makeHasher creates a repetitive hasher, allowing the same hash data structures to
// be reused between hash runs instead of requiring new ones to be created. The returned
// function is not thread safe!
func makeHasher(h hash.Hash) hasher {
	// sha3.state supports Read to get the sum, use it to avoid the overhead of Sum.
	// Read alters the state but we reset the hash before every operation.
	type readerHash interface {
		hash.Hash
		Read([]byte) (int, error)
	}
	rh, ok := h.(readerHash)
	if !ok {
		panic("can't find Read method on hash")
	}
	outputLen := rh.Size()
	return func(dest []byte, data []byte) {
		rh.Reset()
		rh.Write(data)
		rh.Read(dest[:outputLen])
	}
}

// seedHash is the seed to use for generating a verification cache and the mining
// dataset.
func seedHash(block uint64) []byte {
	seed := make([]byte, 32)
	if block < C_epochLength {
		return seed
	}
	keccak256 := makeHasher(sha3.NewLegacyKeccak256())
	for i := 0; i < int(block/C_epochLength); i++ {
		keccak256(seed, seed)
	}
	return seed
}

// SeedHash is the seed to use for generating a verification cache and the mining
// dataset.
func SeedHash(block uint64) []byte {
	return seedHash(block)
}

// generateCache creates a verification cache of a given size for an input seed.
// The cache production process involves first sequentially filling up 32 MB of
// memory, then performing two passes of Sergio Demian Lerner's RandMemoHash
// algorithm from Strict Memory Hard Hashing Functions (2014). The output is a
// set of 524288 64-byte values.
// This method places the result into dest in machine byte order.
func generateCache(dest []uint32, epoch uint64, seed []byte, logger *log.Logger) {
	// Print some debug logs to allow analysis on low end devices

	start := time.Now()
	defer func() {
		elapsed := time.Since(start)

		logEntry := logger.WithFields(log.Fields{
			"elapsed": common.PrettyDuration(elapsed),
		})

		if elapsed > 3*time.Second {
			logEntry.Info("Generating ethash verification cache")
		} else {
			logEntry.Debug("Generating ethash verification cache")
		}
	}()
	// Convert our destination slice to a byte buffer
	header := *(*reflect.SliceHeader)(unsafe.Pointer(&dest))
	header.Len *= 4
	header.Cap *= 4
	cache := *(*[]byte)(unsafe.Pointer(&header))

	// Calculate the number of theoretical rows (we'll store in one buffer nonetheless)
	size := uint64(len(cache))
	rows := int(size) / hashBytes

	// Start a monitoring goroutine to report progress on low end devices
	var progress uint32

	done := make(chan struct{})
	defer close(done)

	go func() {
		defer func() {
			if r := recover(); r != nil {
				logger.WithFields(log.Fields{
					"error":      r,
					"stacktrace": string(debug.Stack()),
				}).Error("Go-Quai Panicked")
			}
		}()
		for {
			select {
			case <-done:
				return
			case <-time.After(3 * time.Second):
				logger.WithFields(log.Fields{
					"percentage": uint64(atomic.LoadUint32(&progress) * 100 / uint32(rows) / 4),
					"elapsed":    common.PrettyDuration(time.Since(start)),
				}).Info("Generating ethash verification cache")
			}
		}
	}()
	// Create a hasher to reuse between invocations
	keccak512 := makeHasher(sha3.NewLegacyKeccak512())

	// Sequentially produce the initial dataset
	keccak512(cache, seed)
	for offset := uint64(hashBytes); offset < size; offset += hashBytes {
		keccak512(cache[offset:], cache[offset-hashBytes:offset])
		atomic.AddUint32(&progress, 1)
	}
	// Use a low-round version of randmemohash
	temp := make([]byte, hashBytes)

	for i := 0; i < cacheRounds; i++ {
		for j := 0; j < rows; j++ {
			var (
				srcOff = ((j - 1 + rows) % rows) * hashBytes
				dstOff = j * hashBytes
				xorOff = (binary.LittleEndian.Uint32(cache[dstOff:]) % uint32(rows)) * hashBytes
			)
			bitutil.XORBytes(temp, cache[srcOff:srcOff+hashBytes], cache[xorOff:xorOff+hashBytes])
			keccak512(cache[dstOff:], temp)

			atomic.AddUint32(&progress, 1)
		}
	}
	// Swap the byte order on big endian systems and return
	if !isLittleEndian() {
		swap(cache)
	}
}

// generateCDag generates the cDag used for progpow. If the 'cDag' is nil, this method is a no-op. Otherwise
// it expects the cDag to be of size progpowCacheWords
func generateCDag(cDag, cache []uint32, epoch uint64, logger *log.Logger) {
	if cDag == nil {
		return
	}
	start := time.Now()
	keccak512 := makeHasher(sha3.NewLegacyKeccak512())

	for i := uint32(0); i < progpowCacheWords/16; i++ {
		rawData := generateDatasetItem(cache, i, keccak512)
		// 64 bytes in rawData -> 16 uint32
		for j := uint32(0); j < 16; j++ {
			cDag[i*16+j] = binary.LittleEndian.Uint32(rawData[4*j:])
		}
	}

	elapsed := time.Since(start)
	logger.WithFields(log.Fields{
		"elapsed": common.PrettyDuration(elapsed),
		"epoch":   epoch,
	}).Debug("Generated progpow cDag")
}

// swap changes the byte order of the buffer assuming a uint32 representation.
func swap(buffer []byte) {
	for i := 0; i < len(buffer); i += 4 {
		binary.BigEndian.PutUint32(buffer[i:], binary.LittleEndian.Uint32(buffer[i:]))
	}
}

// fnv is an algorithm inspired by the FNV hash, which in some cases is used as
// a non-associative substitute for XOR. Note that we multiply the prime with
// the full 32-bit input, in contrast with the FNV-1 spec which multiplies the
// prime with one byte (octet) in turn.
func fnv(a, b uint32) uint32 {
	return a*0x01000193 ^ b
}

// fnvHash mixes in data into mix using the ethash fnv method.
func fnvHash(mix []uint32, data []uint32) {
	for i := 0; i < len(mix); i++ {
		mix[i] = mix[i]*0x01000193 ^ data[i]
	}
}

// generateDatasetItem combines data from 256 pseudorandomly selected cache nodes,
// and hashes that to compute a single dataset node.
func generateDatasetItem(cache []uint32, index uint32, keccak512 hasher) []byte {
	// Calculate the number of theoretical rows (we use one buffer nonetheless)
	rows := uint32(len(cache) / hashWords)

	// Initialize the mix
	mix := make([]byte, hashBytes)

	binary.LittleEndian.PutUint32(mix, cache[(index%rows)*hashWords]^index)
	for i := 1; i < hashWords; i++ {
		binary.LittleEndian.PutUint32(mix[i*4:], cache[(index%rows)*hashWords+uint32(i)])
	}
	keccak512(mix, mix)

	// Convert the mix to uint32s to avoid constant bit shifting
	intMix := make([]uint32, hashWords)
	for i := 0; i < len(intMix); i++ {
		intMix[i] = binary.LittleEndian.Uint32(mix[i*4:])
	}
	// fnv it with a lot of random cache nodes based on index
	for i := uint32(0); i < datasetParents; i++ {
		parent := fnv(index^i, intMix[i%16]) % rows
		fnvHash(intMix, cache[parent*hashWords:])
	}
	// Flatten the uint32 mix into a binary one and return
	for i, val := range intMix {
		binary.LittleEndian.PutUint32(mix[i*4:], val)
	}
	keccak512(mix, mix)
	return mix
}

// generateDataset generates the entire ethash dataset for mining.
// This method places the result into dest in machine byte order.
func generateDataset(dest []uint32, epoch uint64, cache []uint32, logger *log.Logger) {
	start := time.Now()
	defer func() {
		elapsed := time.Since(start)

		logEntry := log.Global.WithFields(log.Fields{
			"elapsed": common.PrettyDuration(elapsed),
		})

		if elapsed > 3*time.Second {
			logEntry.Info("Generating ethash  verification cache")
		} else {
			logEntry.Debug("Generating ethash  verification cache")
		}
	}()

	// Figure out whether the bytes need to be swapped for the machine
	swapped := !isLittleEndian()

	// Convert our destination slice to a byte buffer
	header := *(*reflect.SliceHeader)(unsafe.Pointer(&dest))
	header.Len *= 4
	header.Cap *= 4
	dataset := *(*[]byte)(unsafe.Pointer(&header))

	// Generate the dataset on many goroutines since it takes a while
	threads := runtime.NumCPU()
	size := uint64(len(dataset))

	var pend sync.WaitGroup
	pend.Add(threads)

	var progress uint32
	for i := 0; i < threads; i++ {
		go func(id int) {
			defer func() {
				if r := recover(); r != nil {
					logger.WithFields(log.Fields{
						"error":      r,
						"stacktrace": string(debug.Stack()),
					}).Error("Go-Quai Panicked")
				}
			}()
			defer pend.Done()

			// Create a hasher to reuse between invocations
			keccak512 := makeHasher(sha3.NewLegacyKeccak512())

			// Calculate the data segment this thread should generate
			batch := uint32((size + hashBytes*uint64(threads) - 1) / (hashBytes * uint64(threads)))
			first := uint32(id) * batch
			limit := first + batch
			if limit > uint32(size/hashBytes) {
				limit = uint32(size / hashBytes)
			}
			// Calculate the dataset segment
			percent := uint32(size / hashBytes / 100)
			for index := first; index < limit; index++ {
				item := generateDatasetItem(cache, index, keccak512)
				if swapped {
					swap(item)
				}
				copy(dataset[index*hashBytes:], item)

				if status := atomic.AddUint32(&progress, 1); status%percent == 0 {
					logger.WithFields(log.Fields{
						"percentage": uint64(status * 100 / uint32(size/hashBytes)),
						"elapsed":    common.PrettyDuration(time.Since(start)),
					}).Info("Generating DAG in progress")
				}
			}
		}(i)
	}
	// Wait for all the generators to finish and return
	pend.Wait()
}

// hashimoto aggregates data from the full dataset in order to produce our final
// value for a particular header hash and nonce.
func hashimoto(hash []byte, nonce uint64, size uint64, lookup func(index uint32) []uint32) ([]byte, []byte) {
	// Calculate the number of theoretical rows (we use one buffer nonetheless)
	rows := uint32(size / mixBytes)

	// Combine header+nonce into a 64 byte seed
	seed := make([]byte, 40)
	copy(seed, hash)
	binary.LittleEndian.PutUint64(seed[32:], nonce)

	seed = crypto.Keccak512(seed)
	seedHead := binary.LittleEndian.Uint32(seed)

	// Start the mix with replicated seed
	mix := make([]uint32, mixBytes/4)
	for i := 0; i < len(mix); i++ {
		mix[i] = binary.LittleEndian.Uint32(seed[i%16*4:])
	}
	// Mix in random dataset nodes
	temp := make([]uint32, len(mix))

	for i := 0; i < loopAccesses; i++ {
		parent := fnv(uint32(i)^seedHead, mix[i%len(mix)]) % rows
		for j := uint32(0); j < mixBytes/hashBytes; j++ {
			copy(temp[j*hashWords:], lookup(2*parent+j))
		}
		fnvHash(mix, temp)
	}
	// Compress mix
	for i := 0; i < len(mix); i += 4 {
		mix[i/4] = fnv(fnv(fnv(mix[i], mix[i+1]), mix[i+2]), mix[i+3])
	}
	mix = mix[:len(mix)/4]

	digest := make([]byte, common.HashLength)
	for i, val := range mix {
		binary.LittleEndian.PutUint32(digest[i*4:], val)
	}
	return digest, crypto.Keccak256(append(seed, digest...))
}

// hashimotoLight aggregates data from the full dataset (using only a small
// in-memory cache) in order to produce our final value for a particular header
// hash and nonce.
func hashimotoLight(size uint64, cache []uint32, hash []byte, nonce uint64) ([]byte, []byte) {
	keccak512 := makeHasher(sha3.NewLegacyKeccak512())

	lookup := func(index uint32) []uint32 {
		rawData := generateDatasetItem(cache, index, keccak512)

		data := make([]uint32, len(rawData)/4)
		for i := 0; i < len(data); i++ {
			data[i] = binary.LittleEndian.Uint32(rawData[i*4:])
		}
		return data
	}
	return hashimoto(hash, nonce, size, lookup)
}

// hashimotoFull aggregates data from the full dataset (using the full in-memory
// dataset) in order to produce our final value for a particular header hash and
// nonce.
func hashimotoFull(dataset []uint32, hash []byte, nonce uint64) ([]byte, []byte) {
	lookup := func(index uint32) []uint32 {
		offset := index * hashWords
		return dataset[offset : offset+hashWords]
	}
	return hashimoto(hash, nonce, uint64(len(dataset))*4, lookup)
}

const maxCachedEpoch = 1024

// datasetSizes is a lookup table for the ethash dataset size for the
// first maxCachedEpoch epochs
var datasetSizes = [maxCachedEpoch]uint64{
	4294962304, 4496289664, 4697620352, 4898946944,
	5100273536, 5301598592, 5502925952, 5704251008,
	5905576832, 6106906496, 6308232064, 6509555072,
	6710882176, 6912212864, 7113536896, 7314864512,
	7516192384, 7717519232, 7918844288, 8120171392,
	8321497984, 8522823808, 8724151424, 8925478784,
	9126803584, 9328131968, 9529456256, 9730772608,
	9932108672, 10133437312, 10334763392, 10536091264,
	10737414784, 10938742912, 11140065152, 11341395584,
	11542724224, 11744050048, 11945375872, 12146703232,
	12348029312, 12549354368, 12750680192, 12952009856,
	13153329536, 13354663808, 13555989376, 13757316224,
	13958643584, 14159968384, 14361296512, 14562618496,
	14763947648, 14965276544, 15166602368, 15367929728,
	15569254528, 15770582656, 15971907968, 16173236096,
	16374561664, 16575888512, 16777214336, 16978540928,
	17179864192, 17381190016, 17582519168, 17783848832,
	17985175424, 18186498944, 18387828352, 18589154432,
	18790481536, 18991807616, 19193133952, 19394460544,
	19595787136, 19797113216, 19998441088, 20199764096,
	20401083776, 20602420864, 20803746944, 21005074304,
	21206397568, 21407727232, 21609052288, 21810378112,
	22011704192, 22213031552, 22414359424, 22615686272,
	22817013376, 23018338688, 23219662208, 23420992384,
	23622319744, 23823644288, 24024969856, 24226299008,
	24427624576, 24628951936, 24830273408, 25031604608,
	25232930176, 25434259072, 25635585152, 25836910976,
	26038237312, 26239565696, 26440892288, 26642217344,
	26843545472, 27044871296, 27246196864, 27447524224,
	27648844672, 27850178432, 28051501696, 28252831616,
	28454155904, 28655484544, 28856811136, 29058137728,
	29259463808, 29460790144, 29662116992, 29863443328,
	30064769408, 30266096768, 30467419264, 30668749952,
	30870077312, 31071400576, 31272727936, 31474050688,
	31675383424, 31876701056, 32078036608, 32279362432,
	32480690048, 32682015616, 32883336064, 33084669824,
	33285996416, 33487316608, 33688648064, 33889965952,
	34091302016, 34292624512, 34493953664, 34695281024,
	34896609152, 35097934208, 35299259264, 35500588672,
	35701915264, 35903239552, 36104567936, 36305893504,
	36507220352, 36708546944, 36909872768, 37111198336,
	37312528256, 37513849216, 37715179648, 37916499584,
	38117829248, 38319160448, 38520486272, 38721804416,
	38923139456, 39124465024, 39325791104, 39527118976,
	39728447104, 39929770624, 40131098752, 40332427136,
	40533753472, 40735078016, 40936403072, 41137733248,
	41339059072, 41540384384, 41741711744, 41943039616,
	42144364928, 42345691264, 42547019392, 42748343936,
	42949670528, 43150999168, 43352319104, 43553651584,
	43754978944, 43956301952, 44157630848, 44358956672,
	44560285568, 44761611392, 44962936192, 45164265088,
	45365588864, 45566916224, 45768244352, 45969571712,
	46170897536, 46372221824, 46573549952, 46774877056,
	46976204672, 47177529472, 47378856832, 47580182912,
	47781510272, 47982836864, 48184161152, 48385488512,
	48586815616, 48788142976, 48989470592, 49190797184,
	49392118912, 49593450112, 49794775424, 49996103552,
	50197430144, 50398754176, 50600083328, 50801402752,
	51002733952, 51204061312, 51405388928, 51606713728,
	51808041856, 52009367936, 52210696064, 52412019584,
	52613346176, 52814675072, 53015996288, 53217329024,
	53418651008, 53619979136, 53821308544, 54022632064,
	54223958144, 54425288576, 54626604416, 54827938432,
	55029263488, 55230594688, 55431918208, 55633247104,
	55834574464, 56035897472, 56237224832, 56438552704,
	56639877248, 56841204608, 57042534272, 57243860864,
	57445186432, 57646511744, 57847840384, 58049166976,
	58250493824, 58451819648, 58653145984, 58854466432,
	59055799168, 59257126784, 59458452608, 59659777664,
	59861106304, 60062432384, 60263758976, 60465084032,
	60666411392, 60867736192, 61069066112, 61270392448,
	61471717504, 61673045888, 61874371712, 62075695232,
	62277024896, 62478350464, 62679676288, 62881005184,
	63082327936, 63283651712, 63484983424, 63686307968,
	63887636864, 64088964736, 64290291584, 64491614848,
	64692942976, 64894269824, 65095597184, 65296924544,
	65498248832, 65699576192, 65900899712, 66102226304,
	66303554432, 66504875648, 66706207616, 66907534976,
	67108863616, 67310188672, 67511516032, 67712835712,
	67914168704, 68115496576, 68316821632, 68518150016,
	68719476352, 68920801408, 69122129792, 69323453824,
	69524781184, 69726109568, 69927435904, 70128762752,
	70330086784, 70531414144, 70732741504, 70934067328,
	71135395712, 71336719232, 71538047872, 71739374464,
	71940696704, 72142027136, 72343355008, 72544678784,
	72746008448, 72947333248, 73148661632, 73349987968,
	73551312512, 73752636544, 73953967232, 74155293824,
	74356621184, 74557947008, 74759274112, 74960600192,
	75161926016, 75363254144, 75564580736, 75765907328,
	75967233152, 76168560256, 76369886336, 76571213696,
	76772539264, 76973863552, 77175190912, 77376518528,
	77577846656, 77779170688, 77980496512, 78181825664,
	78383152256, 78584477824, 78785803904, 78987130496,
	79188457856, 79389782656, 79591112576, 79792437376,
	79993760384, 80195092352, 80396418944, 80597743232,
	80799069056, 81000398464, 81201723776, 81403051904,
	81604377472, 81805705088, 82007031424, 82208345984,
	82409682304, 82611011456, 82812337792, 83013663104,
	83214987136, 83416317056, 83617642112, 83818968704,
	84020286848, 84221623424, 84422950784, 84624277376,
	84825602432, 85026929536, 85228257152, 85429580416,
	85630905728, 85832235392, 86033561728, 86234889856,
	86436216704, 86637541504, 86838869888, 87040191104,
	87241522304, 87442848128, 87644175488, 87845502848,
	88046828416, 88248156032, 88449476224, 88650808192,
	88852134016, 89053459072, 89254788992, 89456114816,
	89657441152, 89858762368, 90060093824, 90261418112,
	90462745216, 90664072832, 90865399936, 91066727552,
	91268052352, 91469381504, 91670705024, 91872029824,
	92073361024, 92274683264, 92476012672, 92677340032,
	92878665856, 93079993984, 93281319808, 93482647424,
	93683973248, 93885298048, 94086626176, 94287952256,
	94489280384, 94690602368, 94891933568, 95093259392,
	95294580608, 95495909504, 95697236608, 95898561152,
	96099892352, 96301218688, 96502546048, 96703872896,
	96905193856, 97106524544, 97307852672, 97509176192,
	97710505856, 97911832192, 98113158784, 98314484608,
	98515809152, 98717136512, 98918464384, 99119788928,
	99321116032, 99522445184, 99723764864, 99925096576,
	100126424704, 100327743872, 100529076352, 100730402944,
	100931727488, 101133052288, 101334381952, 101535708544,
	101737035392, 101938357888, 102139690624, 102341015936,
	102542340224, 102743668096, 102944997248, 103146321536,
	103347650176, 103548977024, 103750300288, 103951628672,
	104152953728, 104354275712, 104555609216, 104756934272,
	104958260864, 105159587968, 105360916096, 105562228864,
	105763569536, 105964893568, 106166222464, 106367544704,
	106568875904, 106770202496, 106971529088, 107172846464,
	107374181248, 107575508864, 107776834432, 107978161024,
	108179486336, 108380815232, 108582137984, 108783466112,
	108984795008, 109186120832, 109387447424, 109588774784,
	109790100608, 109991422336, 110192752256, 110394080128,
	110595400576, 110796734336, 110998060928, 111199385216,
	111400714112, 111602039168, 111803367296, 112004691328,
	112206019712, 112407347072, 112608672896, 112809997184,
	113011322752, 113212650112, 113413979264, 113615300992,
	113816632448, 114017958016, 114219285632, 114420612224,
	114621935744, 114823262336, 115024590976, 115225917824,
	115427242624, 115628572288, 115829898112, 116031219328,
	116232547712, 116433878656, 116635205248, 116836531072,
	117037856384, 117239184256, 117440511872, 117641838464,
	117843161728, 118044486272, 118245814144, 118447144064,
	118648468096, 118849796992, 119051124352, 119252449664,
	119453777536, 119655103616, 119856430976, 120057751936,
	120259083136, 120460408192, 120661737088, 120863060608,
	121064388992, 121265716864, 121467041152, 121668363392,
	121869696128, 122071023488, 122272348544, 122473675648,
	122674995584, 122876326528, 123077655424, 123278981248,
	123480309376, 123681636224, 123882960512, 124084286336,
	124285615744, 124486937728, 124688268928, 124889593216,
	125090922368, 125292247936, 125493575552, 125694899584,
	125896224128, 126097551488, 126298880128, 126500208256,
	126701530496, 126902859136, 127104187264, 127305510016,
	127506841472, 127708166528, 127909494656, 128110819712,
	128312144768, 128513472896, 128714801024, 128916127616,
	129117453952, 129318780544, 129520105856, 129721432448,
	129922758272, 130124086912, 130325405312, 130526740352,
	130728065152, 130929391744, 131130717568, 131332038016,
	131533371776, 131734698112, 131936023936, 132137343872,
	132338678656, 132540003968, 132741332096, 132942657664,
	133143984256, 133345311872, 133546636928, 133747961216,
	133949286784, 134150615936, 134351942272, 134553269632,
	134754597248, 134955924352, 135157249408, 135358575232,
	135559900544, 135761231488, 135962556032, 136163884928,
	136365210752, 136566537088, 136767857792, 136969188992,
	137170514816, 137371839872, 137573170816, 137774496128,
	137975823488, 138177148544, 138378474112, 138579804032,
	138781129856, 138982450304, 139183783808, 139385109376,
	139586433664, 139787759744, 139989087872, 140190415744,
	140391737216, 140593066624, 140794390144, 140995722368,
	141197041792, 141398372992, 141599701888, 141801028736,
	142002356096, 142203680384, 142405009024, 142606332032,
	142807656064, 143008988288, 143210315392, 143411640704,
	143612968064, 143814295424, 144015620992, 144216947584,
	144418271104, 144619601024, 144820925824, 145022252416,
	145223581312, 145424907904, 145626233728, 145827561344,
	146028887168, 146230206592, 146431540352, 146632867456,
	146834194048, 147035519104, 147236847232, 147438171008,
	147639500672, 147840824704, 148042148992, 148243478912,
	148444804736, 148646133632, 148847460224, 149048784512,
	149250112384, 149451434624, 149652766336, 149854091392,
	150055410304, 150256743808, 150458072704, 150659399552,
	150860725888, 151062050176, 151263378304, 151464698752,
	151666032512, 151867358848, 152068685696, 152270012288,
	152471335552, 152672661632, 152873989504, 153075313024,
	153276645248, 153477970816, 153679295872, 153880622464,
	154081950592, 154283277952, 154484599168, 154685930624,
	154887256448, 155088584576, 155289908096, 155491236224,
	155692564096, 155893889152, 156095211136, 156296541568,
	156497869184, 156699196288, 156900523904, 157101848192,
	157303174528, 157504500352, 157705823872, 157907155072,
	158108480896, 158309808512, 158511135872, 158712463232,
	158913789568, 159115116416, 159316441472, 159517768832,
	159719092864, 159920422784, 160121746816, 160323072128,
	160524399488, 160725724288, 160927054208, 161128381312,
	161329704832, 161531035264, 161732356736, 161933687936,
	162135014528, 162336340352, 162537667456, 162738992512,
	162940321664, 163141648256, 163342974848, 163544300672,
	163745627264, 163946951552, 164148278656, 164349606272,
	164550934144, 164752260224, 164953579136, 165154913408,
	165356235904, 165557565568, 165758893952, 165960215936,
	166161546112, 166362873472, 166564197248, 166765526912,
	166966850432, 167168177024, 167369506688, 167570832256,
	167772157312, 167973484928, 168174812032, 168376139392,
	168577463168, 168778792576, 168980113024, 169181443456,
	169382768768, 169584098176, 169785423232, 169986750592,
	170188078976, 170389405568, 170590728832, 170792057728,
	170993383552, 171194711936, 171396035456, 171597364352,
	171798686336, 172000018304, 172201341056, 172402665856,
	172603993472, 172805324416, 173006649472, 173207973248,
	173409299584, 173610627712, 173811957632, 174013280128,
	174214604672, 174415933568, 174617260672, 174818588288,
	175019916928, 175221241984, 175422568576, 175623892096,
	175825220224, 176026550144, 176227874432, 176429202304,
	176630529664, 176831854208, 177033178496, 177234507904,
	177435835264, 177637162624, 177838483072, 178039814528,
	178241142656, 178442468224, 178643795584, 178845118336,
	179046447232, 179247773312, 179449100416, 179650428032,
	179851752064, 180053079424, 180254405504, 180455734912,
	180657053312, 180858383488, 181059714688, 181261038976,
	181462367872, 181663689344, 181865018752, 182066344832,
	182267668864, 182469000832, 182670318464, 182871653504,
	183072980096, 183274305152, 183475633024, 183676958848,
	183878275712, 184079608448, 184280935808, 184482263936,
	184683592832, 184884918656, 185086245248, 185287571072,
	185488898432, 185690224768, 185891553152, 186092871808,
	186294203776, 186495528832, 186696858496, 186898185088,
	187099512448, 187300836992, 187502160256, 187703492224,
	187904819072, 188106145408, 188307472256, 188508798592,
	188710124672, 188911452032, 189112778368, 189314105216,
	189515431808, 189716747648, 189918081664, 190119411584,
	190320735872, 190522062464, 190723390336, 190924717184,
	191126044544, 191327370368, 191528695168, 191730023552,
	191931350656, 192132672896, 192333999488, 192535329664,
	192736654976, 192937981568, 193139305088, 193340636288,
	193541959808, 193743284096, 193944613504, 194145943168,
	194347270016, 194548594304, 194749921664, 194951249536,
	195152576384, 195353902208, 195555220864, 195756553088,
	195957877888, 196159209088, 196360532864, 196561858432,
	196763187328, 196964515712, 197165839744, 197367166592,
	197568492928, 197769819008, 197971147648, 198172475264,
	198373800832, 198575128448, 198776453504, 198977780608,
	199179108224, 199380434048, 199581759616, 199783086208,
	199984414592, 200185740928, 200387066752, 200588394112,
	200789720704, 200991046016, 201192373376, 201393699968,
	201595027328, 201796351616, 201997680512, 202199006336,
	202400331904, 202601660032, 202802982016, 203004311168,
	203205639808, 203406964864, 203608283776, 203809619072,
	204010942592, 204212273024, 204413597056, 204614919296,
	204816251264, 205017579136, 205218904448, 205420221824,
	205621555072, 205822882432, 206024210048, 206225535872,
	206426860928, 206628192128, 206829511808, 207030845312,
	207232169344, 207433492096, 207634824064, 207836142464,
	208037478016, 208238803328, 208440128128, 208641457792,
	208842783872, 209044108928, 209245437056, 209446754432,
	209648089984, 209849416064, 210050740864, 210252066176,
}

// cacheSizes is a lookup table for the ethash verification cache size for the
// first maxCachedEpoch epochs
var cacheSizes = [maxCachedEpoch]uint64{
	16776896, 23068096, 29359808, 35650624,
	41942848, 48234176, 54525248, 60817216,
	67108672, 73400128, 79690816, 85982656,
	92273344, 98565568, 104854592, 111148864,
	117440192, 123731264, 130023104, 136313792,
	142606144, 148897088, 155188928, 161480512,
	167771584, 174063424, 180354752, 186645952,
	192937792, 199228352, 205517632, 211812032,
	218102848, 224394944, 230684864, 236976448,
	243268672, 249560512, 255851072, 262143424,
	268435264, 274726208, 281018176, 287308352,
	293600192, 299891776, 306182848, 312475456,
	318766528, 325058368, 331349696, 337640896,
	343931584, 350223296, 356514112, 362805056,
	369096256, 375389888, 381681472, 387971392,
	394264384, 400555328, 406846912, 413136832,
	419428928, 425718848, 432012992, 438304576,
	444596032, 450887104, 457178944, 463470272,
	469760576, 476053184, 482344768, 488635712,
	494926912, 501217088, 507509312, 513801664,
	520092992, 526384832, 532676416, 538960064,
	545257408, 551548736, 557842112, 564132928,
	570424768, 576715712, 583006912, 589298368,
	595590208, 601881536, 608172608, 614464832,
	620756672, 627046592, 633336896, 639630272,
	645922496, 652212928, 658505024, 664795328,
	671088064, 677379904, 683669696, 689962304,
	696253504, 702544576, 708836672, 715127872,
	721419584, 727708736, 734003008, 740294336,
	746585792, 752877248, 759168832, 765459776,
	771751744, 778041536, 784334528, 790626112,
	796915648, 803207872, 809500096, 815791168,
	822082112, 828372928, 834666304, 840956608,
	847248832, 853540544, 859830592, 866122304,
	872414528, 878706112, 884997952, 891289024,
	897578944, 903872192, 910163776, 916454464,
	922744384, 929038016, 935328448, 941619904,
	947912512, 954203456, 960494272, 966786752,
	973078336, 979369408, 985660864, 991950016,
	998243776, 1004534848, 1010826944, 1017116992,
	1023409984, 1029700928, 1035990976, 1042282816,
	1048574528, 1054865984, 1061157568, 1067449664,
	1073741632, 1080032192, 1086321088, 1092615872,
	1098907456, 1105197248, 1111489856, 1117781696,
	1124072512, 1130364608, 1136656064, 1142947136,
	1149238336, 1155530176, 1161819584, 1168113472,
	1174404032, 1180695104, 1186983488, 1193279168,
	1199569984, 1205859136, 1212153664, 1218444736,
	1224736192, 1231027904, 1237318592, 1243610432,
	1249901888, 1256193856, 1262485184, 1268776384,
	1275067072, 1281358912, 1287650752, 1293941696,
	1300233664, 1306524224, 1312815808, 1319107648,
	1325398208, 1331688256, 1337982656, 1344273472,
	1350565312, 1356855488, 1363146688, 1369440064,
	1375731008, 1382022848, 1388312768, 1394605504,
	1400897216, 1407187136, 1413479744, 1419768512,
	1426060736, 1432353344, 1438643392, 1444937152,
	1451225792, 1457519552, 1463811392, 1470102464,
	1476394688, 1482684352, 1488975808, 1495269184,
	1501560128, 1507852096, 1514143552, 1520434624,
	1526726464, 1533016768, 1539307712, 1545600064,
	1551891136, 1558182848, 1564472384, 1570766656,
	1577054656, 1583347648, 1589640128, 1595931328,
	1602222784, 1608515264, 1614806464, 1621098176,
	1627389248, 1633681216, 1639972288, 1646264128,
	1652555456, 1658846912, 1665136576, 1671429184,
	1677720256, 1684011584, 1690304192, 1696594112,
	1702887104, 1709178176, 1715468992, 1721761472,
	1728052288, 1734344384, 1740634432, 1746927296,
	1753217216, 1759510208, 1765801792, 1772092864,
	1778381632, 1784676032, 1790967232, 1797258304,
	1803549376, 1809841984, 1816132928, 1822424512,
	1828715072, 1835007296, 1841298752, 1847590592,
	1853882176, 1860170944, 1866462784, 1872755648,
	1879045568, 1885338304, 1891630016, 1897918912,
	1904213824, 1910502208, 1916796352, 1923088064,
	1929377984, 1935671104, 1941960256, 1948253248,
	1954543936, 1960836928, 1967128256, 1973418176,
	1979711168, 1986001088, 1992294208, 1998585536,
	2004875584, 2011166656, 2017455808, 2023750208,
	2030042176, 2036334016, 2042624704, 2048917184,
	2055206848, 2061500096, 2067791552, 2074083136,
	2080373056, 2086664768, 2092956352, 2099247424,
	2105538368, 2111830976, 2118123328, 2124414784,
	2130706112, 2136996416, 2143289024, 2149579072,
	2155871552, 2162161472, 2168454592, 2174744512,
	2181036736, 2187328064, 2193619264, 2199911872,
	2206203712, 2212494656, 2218785728, 2225077952,
	2231369024, 2237658944, 2243952064, 2250243136,
	2256534208, 2262826816, 2269116352, 2275408448,
	2281701056, 2287991744, 2294283968, 2300574784,
	2306867008, 2313158464, 2319449408, 2325740096,
	2332032832, 2338323776, 2344615744, 2350906304,
	2357198528, 2363490112, 2369781184, 2376072896,
	2382363968, 2388655936, 2394947392, 2401237952,
	2407529792, 2413821376, 2420113088, 2426404672,
	2432695744, 2438986688, 2445278656, 2451570496,
	2457861184, 2464152896, 2470444864, 2476735552,
	2483027392, 2489319104, 2495610688, 2501902016,
	2508193216, 2514485056, 2520772288, 2527066688,
	2533358528, 2539650368, 2545941952, 2552231744,
	2558524096, 2564816192, 2571107648, 2577399232,
	2583691072, 2589982144, 2596271936, 2602565312,
	2608855616, 2615147072, 2621438656, 2627731136,
	2634020416, 2640312512, 2646604864, 2652894784,
	2659187392, 2665479616, 2671771072, 2678062784,
	2684353472, 2690645824, 2696935616, 2703228608,
	2709520192, 2715810368, 2722102976, 2728394432,
	2734683968, 2740977472, 2747268416, 2753559616,
	2759851712, 2766140864, 2772434752, 2778726208,
	2785016384, 2791308736, 2797596608, 2803891264,
	2810183104, 2816474944, 2822764096, 2829057344,
	2835347392, 2841639104, 2847932224, 2854223552,
	2860515136, 2866805696, 2873097152, 2879389376,
	2885679296, 2891971136, 2898263744, 2904554944,
	2910846272, 2917137856, 2923427776, 2929721152,
	2936012224, 2942303296, 2948593216, 2954886976,
	2961176384, 2967469504, 2973761216, 2980051264,
	2986344128, 2992635328, 2998925504, 3005218624,
	3011507776, 3017801152, 3024092608, 3030383936,
	3036675904, 3042967232, 3049258816, 3055550144,
	3061840448, 3068131904, 3074424512, 3080716096,
	3087004864, 3093298112, 3099588032, 3105879104,
	3112172608, 3118464704, 3124755136, 3131046592,
	3137338432, 3143630528, 3149921728, 3156212288,
	3162503104, 3168796352, 3175087424, 3181379008,
	3187668928, 3193961536, 3200252096, 3206544832,
	3212836672, 3219125696, 3225418688, 3231710656,
	3238002112, 3244293952, 3250585024, 3256876736,
	3263168192, 3269459264, 3275750336, 3282042688,
	3288331456, 3294625216, 3300917056, 3307208512,
	3313499584, 3319790912, 3326082112, 3332372672,
	3338665024, 3344956864, 3351246784, 3357539648,
	3363831488, 3370122176, 3376412992, 3382705856,
	3388996928, 3395288896, 3401579072, 3407871424,
	3414163264, 3420454208, 3426745664, 3433036352,
	3439327552, 3445620544, 3451911104, 3458202688,
	3464494144, 3470785216, 3477074624, 3483368128,
	3489658688, 3495952192, 3502243648, 3508534336,
	3514826176, 3521116096, 3527409472, 3533700032,
	3539990464, 3546283712, 3552574912, 3558866624,
	3565157696, 3571448768, 3577739584, 3584032448,
	3590324032, 3596613824, 3602905408, 3609197888,
	3615487552, 3621777344, 3628072768, 3634364224,
	3640654016, 3646946752, 3653235904, 3659530048,
	3665821504, 3672111424, 3678404416, 3684695744,
	3690986944, 3697278784, 3703569472, 3709861696,
	3716151104, 3722441152, 3728736064, 3735027008,
	3741317824, 3747608896, 3753901504, 3760193344,
	3766483648, 3772772672, 3779067328, 3785358656,
	3791650496, 3797941696, 3804233408, 3810523328,
	3816814912, 3823107136, 3829397056, 3835688128,
	3841980992, 3848272832, 3854565184, 3860855744,
	3867147712, 3873439168, 3879728704, 3886021696,
	3892313408, 3898603712, 3904896064, 3911186624,
	3917478592, 3923770432, 3930062272, 3936352832,
	3942643904, 3948936512, 3955227968, 3961519808,
	3967811392, 3974102848, 3980393024, 3986685376,
	3992976704, 3999268288, 4005559744, 4011850432,
	4018142528, 4024433344, 4030724416, 4037015872,
	4043308352, 4049598656, 4055891776, 4062181952,
	4068474688, 4074766016, 4081057472, 4087348288,
	4093640384, 4099931456, 4106222272, 4112514752,
	4118806336, 4125097792, 4131387584, 4137680192,
	4143972032, 4150261568, 4156554176, 4162844864,
	4169137216, 4175428288, 4181720768, 4188011456,
	4194303296, 4200595264, 4206886336, 4213178176,
	4219469504, 4225761088, 4232052416, 4238341696,
	4244635328, 4250926144, 4257217472, 4263507904,
	4269801152, 4276092736, 4282384192, 4288675264,
	4294966976, 4301258048, 4307549632, 4313839168,
	4320132032, 4326423104, 4332715328, 4339004864,
	4345296064, 4351589056, 4357881664, 4364172608,
	4370464192, 4376754752, 4383044672, 4389338944,
	4395630016, 4401920576, 4408213184, 4414504256,
	4420795712, 4427086784, 4433378624, 4439669056,
	4445961664, 4452253376, 4458544192, 4464836416,
	4471125184, 4477419328, 4483710272, 4490001728,
	4496292032, 4502583104, 4508876224, 4515166528,
	4521458752, 4527750208, 4534042432, 4540331968,
	4546625344, 4552916672, 4559208256, 4565498176,
	4571790656, 4578082624, 4584373568, 4590665536,
	4596955072, 4603248448, 4609539776, 4615830976,
	4622122432, 4628414272, 4634705728, 4640997184,
	4647287104, 4653578816, 4659870016, 4666160192,
	4672453696, 4678745536, 4685037376, 4691328448,
	4697619904, 4703911616, 4710202688, 4716493888,
	4722785344, 4729077568, 4735369024, 4741659968,
	4747951808, 4754242112, 4760533952, 4766826304,
	4773116864, 4779407936, 4785699392, 4791991744,
	4798283584, 4804572736, 4810866496, 4817157824,
	4823449408, 4829740096, 4836030656, 4842323776,
	4848615232, 4854906304, 4861196992, 4867489216,
	4873780544, 4880070848, 4886363072, 4892654656,
	4898946496, 4905237952, 4911528256, 4917820736,
	4924112192, 4930403264, 4936695616, 4942987072,
	4949278144, 4955569856, 4961860544, 4968152768,
	4974444224, 4980734656, 4987024192, 4993318592,
	4999609792, 5005901632, 5012192576, 5018483264,
	5024774464, 5031067072, 5037358912, 5043650368,
	5049939392, 5056232768, 5062524608, 5068815424,
	5075106752, 5081399104, 5087689408, 5093982016,
	5100272704, 5106564928, 5112856384, 5119147456,
	5125438016, 5131726528, 5138021312, 5144312128,
	5150604736, 5156896064, 5163187648, 5169479488,
	5175770816, 5182062016, 5188353728, 5194643648,
	5200933568, 5207227328, 5213519552, 5219811136,
	5226101824, 5232393536, 5238684736, 5244976064,
	5251266752, 5257559488, 5263851328, 5270142272,
	5276433856, 5282724416, 5289016384, 5295308224,
	5301600064, 5307891392, 5314180672, 5320472896,
	5326765888, 5333057344, 5339348416, 5345639872,
	5351931584, 5358221632, 5364513344, 5370805312,
	5377095488, 5383388992, 5389678144, 5395970368,
	5402262592, 5408553152, 5414846144, 5421136832,
	5427429184, 5433720128, 5440011712, 5446302656,
	5452594496, 5458883648, 5465176384, 5471468096,
	5477759296, 5484051904, 5490343744, 5496634816,
	5502925888, 5509217216, 5515508672, 5521795648,
	5528092352, 5534383936, 5540671936, 5546966336,
	5553257408, 5559548992, 5565840064, 5572132672,
	5578422848, 5584715072, 5591006912, 5597297984,
	5603589568, 5609880512, 5616172864, 5622463936,
	5628755648, 5635046464, 5641337792, 5647628992,
	5653921216, 5660212928, 5666504512, 5672795456,
	5679086144, 5685378752, 5691669824, 5697961792,
	5704252096, 5710544192, 5716835776, 5723127616,
	5729418944, 5735710528, 5742001984, 5748291904,
	5754584512, 5760875584, 5767167808, 5773459136,
	5779750336, 5786042176, 5792333504, 5798625088,
	5804915008, 5811205184, 5817497536, 5823789376,
	5830080832, 5836372928, 5842665152, 5848955584,
	5855248064, 5861539648, 5867830208, 5874121408,
	5880412352, 5886702784, 5892995648, 5899287872,
	5905578944, 5911871296, 5918162368, 5924453824,
	5930743232, 5937036608, 5943328448, 5949620032,
	5955911488, 5962200896, 5968493632, 5974784576,
	5981075648, 5987367872, 5993660224, 5999949632,
	6006243136, 6012534208, 6018826048, 6025116992,
	6031406912, 6037699904, 6043991872, 6050282944,
	6056573632, 6062866112, 6069157312, 6075449152,
	6081740608, 6088032064, 6094321984, 6100614976,
	6106905664, 6113195072, 6119488832, 6125779648,
	6132071744, 6138361664, 6144654784, 6150946624,
	6157237696, 6163529408, 6169820224, 6176112064,
	6182402624, 6188694208, 6194984512, 6201276352,
	6207569216, 6213861184, 6220152256, 6226443584,
	6232733888, 6239027008, 6245318336, 6251609536,
	6257900864, 6264188992, 6270483136, 6276775616,
	6283064768, 6289356608, 6295649728, 6301940416,
	6308231744, 6314523968, 6320815808, 6327102272,
	6333397568, 6339689152, 6345980096, 6352271936,
	6358564288, 6364854976, 6371147584, 6377437504,
	6383730368, 6390021824, 6396313408, 6402603968,
	6408894656, 6415187648, 6421477312, 6427769792,
	6434061248, 6440352832, 6446644544, 6452931904,
}
